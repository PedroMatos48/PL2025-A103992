Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> PROGRAM identifier SEMICOLON main DOT
Rule 2     main -> const_list var_list statement_list
Rule 3     const_list -> CONST const_decls
Rule 4     const_list -> empty
Rule 5     const_decls -> const_decls const_decl
Rule 6     const_decls -> const_decl
Rule 7     const_decl -> identifier EQUAL INTEGER SEMICOLON
Rule 8     const_decl -> identifier EQUAL STRING SEMICOLON
Rule 9     const_decl -> identifier EQUAL REAL SEMICOLON
Rule 10    const_decl -> identifier EQUAL BOOLEAN SEMICOLON
Rule 11    var_list -> VAR var_decls
Rule 12    var_list -> empty
Rule 13    var_decls -> var_decls var_decl
Rule 14    var_decls -> var_decl
Rule 15    var_decl -> ident_list COLON type_decl SEMICOLON
Rule 16    ident_list -> identifier COMMA ident_list
Rule 17    ident_list -> identifier
Rule 18    type_decl -> ARRAY LBRACKET INTEGER DOT DOT INTEGER RBRACKET OF type
Rule 19    type_decl -> ARRAY LBRACKET identifier DOT DOT identifier RBRACKET OF type
Rule 20    type_decl -> ARRAY LBRACKET INTEGER DOT DOT identifier RBRACKET OF type
Rule 21    type_decl -> ARRAY LBRACKET identifier DOT DOT INTEGER RBRACKET OF type
Rule 22    type_decl -> type
Rule 23    type -> IDENTIFIER
Rule 24    type -> TREAL
Rule 25    type -> TINTEGER
Rule 26    type -> TSTRING
Rule 27    type -> TCHAR
Rule 28    type -> TBOOLEAN
Rule 29    identifier -> IDENTIFIER LBRACKET expression RBRACKET
Rule 30    identifier -> IDENTIFIER
Rule 31    statement_list -> BEGIN statement_seq END
Rule 32    statement_seq -> statement_seq SEMICOLON statement
Rule 33    statement_seq -> statement_seq SEMICOLON
Rule 34    statement_seq -> statement
Rule 35    statement -> writeln
Rule 36    statement -> write
Rule 37    statement -> readln
Rule 38    statement -> read
Rule 39    statement -> assign
Rule 40    statement -> if_stmt
Rule 41    statement -> for_loop
Rule 42    statement -> while_loop
Rule 43    statement -> statement_list
Rule 44    assign -> identifier ASSIGN expression
Rule 45    expression -> expression PLUS expression
Rule 46    expression -> expression MINUS expression
Rule 47    expression -> expression TIMES expression
Rule 48    expression -> expression DIVISION expression
Rule 49    expression -> expression DIV expression
Rule 50    expression -> expression MOD expression
Rule 51    expression -> expression EQUAL expression
Rule 52    expression -> expression DIFFERENT expression
Rule 53    expression -> expression LESS expression
Rule 54    expression -> expression GREATER expression
Rule 55    expression -> expression LEQ expression
Rule 56    expression -> expression GEQ expression
Rule 57    expression -> expression AND expression
Rule 58    expression -> expression OR expression
Rule 59    expression -> NOT expression
Rule 60    expression -> LPAR expression RPAR
Rule 61    expression -> length
Rule 62    expression -> identifier
Rule 63    expression -> INTEGER
Rule 64    expression -> REAL
Rule 65    expression -> CHAR
Rule 66    expression -> STRING
Rule 67    expression -> BOOLEAN
Rule 68    if_stmt -> IF expression THEN statement
Rule 69    if_stmt -> IF expression THEN statement ELSE statement
Rule 70    for_loop -> FOR identifier ASSIGN expression TO expression DO statement
Rule 71    for_loop -> FOR identifier ASSIGN expression DOWNTO expression DO statement
Rule 72    while_loop -> WHILE expression DO statement
Rule 73    writeln -> WRITELN LPAR phrase RPAR
Rule 74    writeln -> WRITELN
Rule 75    write -> WRITE LPAR phrase RPAR
Rule 76    phrase -> phrase_list
Rule 77    phrase_list -> phrase_list COMMA phrase_item
Rule 78    phrase_list -> phrase_item
Rule 79    phrase_item -> STRING
Rule 80    phrase_item -> CHAR
Rule 81    phrase_item -> identifier
Rule 82    phrase_item -> INTEGER
Rule 83    phrase_item -> REAL
Rule 84    read -> READ LPAR identifier RPAR
Rule 85    readln -> READLN LPAR identifier RPAR
Rule 86    readln -> READLN
Rule 87    length -> LENGTH LPAR identifier RPAR
Rule 88    empty -> <empty>

Terminals, with rules where they appear

AND                  : 57
ARRAY                : 18 19 20 21
ASSIGN               : 44 70 71
BEGIN                : 31
BOOLEAN              : 10 67
CHAR                 : 65 80
COLON                : 15
COMMA                : 16 77
COMMENT              : 
CONST                : 3
DIFFERENT            : 52
DIV                  : 49
DIVISION             : 48
DO                   : 70 71 72
DOT                  : 1 18 18 19 19 20 20 21 21
DOWNTO               : 71
ELSE                 : 69
END                  : 31
EQUAL                : 7 8 9 10 51
FOR                  : 70 71
GEQ                  : 56
GREATER              : 54
IDENTIFIER           : 23 29 30
IF                   : 68 69
INTEGER              : 7 18 18 20 21 63 82
LBRACKET             : 18 19 20 21 29
LENGTH               : 87
LEQ                  : 55
LESS                 : 53
LPAR                 : 60 73 75 84 85 87
MINUS                : 46
MOD                  : 50
NOT                  : 59
OF                   : 18 19 20 21
OR                   : 58
PLUS                 : 45
PROGRAM              : 1
RBRACKET             : 18 19 20 21 29
READ                 : 84
READLN               : 85 86
REAL                 : 9 64 83
RPAR                 : 60 73 75 84 85 87
SEMICOLON            : 1 7 8 9 10 15 32 33
STRING               : 8 66 79
TBOOLEAN             : 28
TCHAR                : 27
THEN                 : 68 69
TIMES                : 47
TINTEGER             : 25
TO                   : 70
TREAL                : 24
TSTRING              : 26
VAR                  : 11
WHILE                : 72
WRITE                : 75
WRITELN              : 73 74
error                : 

Nonterminals, with rules where they appear

assign               : 39
const_decl           : 5 6
const_decls          : 3 5
const_list           : 2
empty                : 4 12
expression           : 29 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60 68 69 70 70 71 71 72
for_loop             : 41
ident_list           : 15 16
identifier           : 1 7 8 9 10 16 17 19 19 20 21 44 62 70 71 81 84 85 87
if_stmt              : 40
length               : 61
main                 : 1
phrase               : 73 75
phrase_item          : 77 78
phrase_list          : 76 77
read                 : 38
readln               : 37
start                : 0
statement            : 32 34 68 69 69 70 71 72
statement_list       : 2 43
statement_seq        : 31 32 33
type                 : 18 19 20 21 22
type_decl            : 15
var_decl             : 13 14
var_decls            : 11 13
var_list             : 2
while_loop           : 42
write                : 36
writeln              : 35

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PROGRAM identifier SEMICOLON main DOT

    PROGRAM         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PROGRAM . identifier SEMICOLON main DOT
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 3

state 3

    (1) start -> PROGRAM identifier . SEMICOLON main DOT

    SEMICOLON       shift and go to state 5


state 4

    (29) identifier -> IDENTIFIER . LBRACKET expression RBRACKET
    (30) identifier -> IDENTIFIER .

    LBRACKET        shift and go to state 6
    SEMICOLON       reduce using rule 30 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 30 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 30 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 30 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 30 (identifier -> IDENTIFIER .)
    DIVISION        reduce using rule 30 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 30 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 30 (identifier -> IDENTIFIER .)
    EQUAL           reduce using rule 30 (identifier -> IDENTIFIER .)
    DIFFERENT       reduce using rule 30 (identifier -> IDENTIFIER .)
    LESS            reduce using rule 30 (identifier -> IDENTIFIER .)
    GREATER         reduce using rule 30 (identifier -> IDENTIFIER .)
    LEQ             reduce using rule 30 (identifier -> IDENTIFIER .)
    GEQ             reduce using rule 30 (identifier -> IDENTIFIER .)
    AND             reduce using rule 30 (identifier -> IDENTIFIER .)
    OR              reduce using rule 30 (identifier -> IDENTIFIER .)
    RPAR            reduce using rule 30 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 30 (identifier -> IDENTIFIER .)
    DO              reduce using rule 30 (identifier -> IDENTIFIER .)
    END             reduce using rule 30 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 30 (identifier -> IDENTIFIER .)
    TO              reduce using rule 30 (identifier -> IDENTIFIER .)
    DOWNTO          reduce using rule 30 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 30 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 30 (identifier -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (identifier -> IDENTIFIER .)
    DOT             reduce using rule 30 (identifier -> IDENTIFIER .)


state 5

    (1) start -> PROGRAM identifier SEMICOLON . main DOT
    (2) main -> . const_list var_list statement_list
    (3) const_list -> . CONST const_decls
    (4) const_list -> . empty
    (88) empty -> .

    CONST           shift and go to state 9
    VAR             reduce using rule 88 (empty -> .)
    BEGIN           reduce using rule 88 (empty -> .)

    main                           shift and go to state 7
    const_list                     shift and go to state 8
    empty                          shift and go to state 10

state 6

    (29) identifier -> IDENTIFIER LBRACKET . expression RBRACKET
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 11
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 7

    (1) start -> PROGRAM identifier SEMICOLON main . DOT

    DOT             shift and go to state 22


state 8

    (2) main -> const_list . var_list statement_list
    (11) var_list -> . VAR var_decls
    (12) var_list -> . empty
    (88) empty -> .

    VAR             shift and go to state 24
    BEGIN           reduce using rule 88 (empty -> .)

    var_list                       shift and go to state 23
    empty                          shift and go to state 25

state 9

    (3) const_list -> CONST . const_decls
    (5) const_decls -> . const_decls const_decl
    (6) const_decls -> . const_decl
    (7) const_decl -> . identifier EQUAL INTEGER SEMICOLON
    (8) const_decl -> . identifier EQUAL STRING SEMICOLON
    (9) const_decl -> . identifier EQUAL REAL SEMICOLON
    (10) const_decl -> . identifier EQUAL BOOLEAN SEMICOLON
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    const_decls                    shift and go to state 26
    const_decl                     shift and go to state 27
    identifier                     shift and go to state 28

state 10

    (4) const_list -> empty .

    VAR             reduce using rule 4 (const_list -> empty .)
    BEGIN           reduce using rule 4 (const_list -> empty .)


state 11

    (29) identifier -> IDENTIFIER LBRACKET expression . RBRACKET
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 12

    (59) expression -> NOT . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 44
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 13

    (60) expression -> LPAR . expression RPAR
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 45
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 14

    (61) expression -> length .

    RBRACKET        reduce using rule 61 (expression -> length .)
    PLUS            reduce using rule 61 (expression -> length .)
    MINUS           reduce using rule 61 (expression -> length .)
    TIMES           reduce using rule 61 (expression -> length .)
    DIVISION        reduce using rule 61 (expression -> length .)
    DIV             reduce using rule 61 (expression -> length .)
    MOD             reduce using rule 61 (expression -> length .)
    EQUAL           reduce using rule 61 (expression -> length .)
    DIFFERENT       reduce using rule 61 (expression -> length .)
    LESS            reduce using rule 61 (expression -> length .)
    GREATER         reduce using rule 61 (expression -> length .)
    LEQ             reduce using rule 61 (expression -> length .)
    GEQ             reduce using rule 61 (expression -> length .)
    AND             reduce using rule 61 (expression -> length .)
    OR              reduce using rule 61 (expression -> length .)
    RPAR            reduce using rule 61 (expression -> length .)
    THEN            reduce using rule 61 (expression -> length .)
    DO              reduce using rule 61 (expression -> length .)
    END             reduce using rule 61 (expression -> length .)
    SEMICOLON       reduce using rule 61 (expression -> length .)
    ELSE            reduce using rule 61 (expression -> length .)
    TO              reduce using rule 61 (expression -> length .)
    DOWNTO          reduce using rule 61 (expression -> length .)


state 15

    (62) expression -> identifier .

    RBRACKET        reduce using rule 62 (expression -> identifier .)
    PLUS            reduce using rule 62 (expression -> identifier .)
    MINUS           reduce using rule 62 (expression -> identifier .)
    TIMES           reduce using rule 62 (expression -> identifier .)
    DIVISION        reduce using rule 62 (expression -> identifier .)
    DIV             reduce using rule 62 (expression -> identifier .)
    MOD             reduce using rule 62 (expression -> identifier .)
    EQUAL           reduce using rule 62 (expression -> identifier .)
    DIFFERENT       reduce using rule 62 (expression -> identifier .)
    LESS            reduce using rule 62 (expression -> identifier .)
    GREATER         reduce using rule 62 (expression -> identifier .)
    LEQ             reduce using rule 62 (expression -> identifier .)
    GEQ             reduce using rule 62 (expression -> identifier .)
    AND             reduce using rule 62 (expression -> identifier .)
    OR              reduce using rule 62 (expression -> identifier .)
    RPAR            reduce using rule 62 (expression -> identifier .)
    THEN            reduce using rule 62 (expression -> identifier .)
    DO              reduce using rule 62 (expression -> identifier .)
    END             reduce using rule 62 (expression -> identifier .)
    SEMICOLON       reduce using rule 62 (expression -> identifier .)
    ELSE            reduce using rule 62 (expression -> identifier .)
    TO              reduce using rule 62 (expression -> identifier .)
    DOWNTO          reduce using rule 62 (expression -> identifier .)


state 16

    (63) expression -> INTEGER .

    RBRACKET        reduce using rule 63 (expression -> INTEGER .)
    PLUS            reduce using rule 63 (expression -> INTEGER .)
    MINUS           reduce using rule 63 (expression -> INTEGER .)
    TIMES           reduce using rule 63 (expression -> INTEGER .)
    DIVISION        reduce using rule 63 (expression -> INTEGER .)
    DIV             reduce using rule 63 (expression -> INTEGER .)
    MOD             reduce using rule 63 (expression -> INTEGER .)
    EQUAL           reduce using rule 63 (expression -> INTEGER .)
    DIFFERENT       reduce using rule 63 (expression -> INTEGER .)
    LESS            reduce using rule 63 (expression -> INTEGER .)
    GREATER         reduce using rule 63 (expression -> INTEGER .)
    LEQ             reduce using rule 63 (expression -> INTEGER .)
    GEQ             reduce using rule 63 (expression -> INTEGER .)
    AND             reduce using rule 63 (expression -> INTEGER .)
    OR              reduce using rule 63 (expression -> INTEGER .)
    RPAR            reduce using rule 63 (expression -> INTEGER .)
    THEN            reduce using rule 63 (expression -> INTEGER .)
    DO              reduce using rule 63 (expression -> INTEGER .)
    END             reduce using rule 63 (expression -> INTEGER .)
    SEMICOLON       reduce using rule 63 (expression -> INTEGER .)
    ELSE            reduce using rule 63 (expression -> INTEGER .)
    TO              reduce using rule 63 (expression -> INTEGER .)
    DOWNTO          reduce using rule 63 (expression -> INTEGER .)


state 17

    (64) expression -> REAL .

    RBRACKET        reduce using rule 64 (expression -> REAL .)
    PLUS            reduce using rule 64 (expression -> REAL .)
    MINUS           reduce using rule 64 (expression -> REAL .)
    TIMES           reduce using rule 64 (expression -> REAL .)
    DIVISION        reduce using rule 64 (expression -> REAL .)
    DIV             reduce using rule 64 (expression -> REAL .)
    MOD             reduce using rule 64 (expression -> REAL .)
    EQUAL           reduce using rule 64 (expression -> REAL .)
    DIFFERENT       reduce using rule 64 (expression -> REAL .)
    LESS            reduce using rule 64 (expression -> REAL .)
    GREATER         reduce using rule 64 (expression -> REAL .)
    LEQ             reduce using rule 64 (expression -> REAL .)
    GEQ             reduce using rule 64 (expression -> REAL .)
    AND             reduce using rule 64 (expression -> REAL .)
    OR              reduce using rule 64 (expression -> REAL .)
    RPAR            reduce using rule 64 (expression -> REAL .)
    THEN            reduce using rule 64 (expression -> REAL .)
    DO              reduce using rule 64 (expression -> REAL .)
    END             reduce using rule 64 (expression -> REAL .)
    SEMICOLON       reduce using rule 64 (expression -> REAL .)
    ELSE            reduce using rule 64 (expression -> REAL .)
    TO              reduce using rule 64 (expression -> REAL .)
    DOWNTO          reduce using rule 64 (expression -> REAL .)


state 18

    (65) expression -> CHAR .

    RBRACKET        reduce using rule 65 (expression -> CHAR .)
    PLUS            reduce using rule 65 (expression -> CHAR .)
    MINUS           reduce using rule 65 (expression -> CHAR .)
    TIMES           reduce using rule 65 (expression -> CHAR .)
    DIVISION        reduce using rule 65 (expression -> CHAR .)
    DIV             reduce using rule 65 (expression -> CHAR .)
    MOD             reduce using rule 65 (expression -> CHAR .)
    EQUAL           reduce using rule 65 (expression -> CHAR .)
    DIFFERENT       reduce using rule 65 (expression -> CHAR .)
    LESS            reduce using rule 65 (expression -> CHAR .)
    GREATER         reduce using rule 65 (expression -> CHAR .)
    LEQ             reduce using rule 65 (expression -> CHAR .)
    GEQ             reduce using rule 65 (expression -> CHAR .)
    AND             reduce using rule 65 (expression -> CHAR .)
    OR              reduce using rule 65 (expression -> CHAR .)
    RPAR            reduce using rule 65 (expression -> CHAR .)
    THEN            reduce using rule 65 (expression -> CHAR .)
    DO              reduce using rule 65 (expression -> CHAR .)
    END             reduce using rule 65 (expression -> CHAR .)
    SEMICOLON       reduce using rule 65 (expression -> CHAR .)
    ELSE            reduce using rule 65 (expression -> CHAR .)
    TO              reduce using rule 65 (expression -> CHAR .)
    DOWNTO          reduce using rule 65 (expression -> CHAR .)


state 19

    (66) expression -> STRING .

    RBRACKET        reduce using rule 66 (expression -> STRING .)
    PLUS            reduce using rule 66 (expression -> STRING .)
    MINUS           reduce using rule 66 (expression -> STRING .)
    TIMES           reduce using rule 66 (expression -> STRING .)
    DIVISION        reduce using rule 66 (expression -> STRING .)
    DIV             reduce using rule 66 (expression -> STRING .)
    MOD             reduce using rule 66 (expression -> STRING .)
    EQUAL           reduce using rule 66 (expression -> STRING .)
    DIFFERENT       reduce using rule 66 (expression -> STRING .)
    LESS            reduce using rule 66 (expression -> STRING .)
    GREATER         reduce using rule 66 (expression -> STRING .)
    LEQ             reduce using rule 66 (expression -> STRING .)
    GEQ             reduce using rule 66 (expression -> STRING .)
    AND             reduce using rule 66 (expression -> STRING .)
    OR              reduce using rule 66 (expression -> STRING .)
    RPAR            reduce using rule 66 (expression -> STRING .)
    THEN            reduce using rule 66 (expression -> STRING .)
    DO              reduce using rule 66 (expression -> STRING .)
    END             reduce using rule 66 (expression -> STRING .)
    SEMICOLON       reduce using rule 66 (expression -> STRING .)
    ELSE            reduce using rule 66 (expression -> STRING .)
    TO              reduce using rule 66 (expression -> STRING .)
    DOWNTO          reduce using rule 66 (expression -> STRING .)


state 20

    (67) expression -> BOOLEAN .

    RBRACKET        reduce using rule 67 (expression -> BOOLEAN .)
    PLUS            reduce using rule 67 (expression -> BOOLEAN .)
    MINUS           reduce using rule 67 (expression -> BOOLEAN .)
    TIMES           reduce using rule 67 (expression -> BOOLEAN .)
    DIVISION        reduce using rule 67 (expression -> BOOLEAN .)
    DIV             reduce using rule 67 (expression -> BOOLEAN .)
    MOD             reduce using rule 67 (expression -> BOOLEAN .)
    EQUAL           reduce using rule 67 (expression -> BOOLEAN .)
    DIFFERENT       reduce using rule 67 (expression -> BOOLEAN .)
    LESS            reduce using rule 67 (expression -> BOOLEAN .)
    GREATER         reduce using rule 67 (expression -> BOOLEAN .)
    LEQ             reduce using rule 67 (expression -> BOOLEAN .)
    GEQ             reduce using rule 67 (expression -> BOOLEAN .)
    AND             reduce using rule 67 (expression -> BOOLEAN .)
    OR              reduce using rule 67 (expression -> BOOLEAN .)
    RPAR            reduce using rule 67 (expression -> BOOLEAN .)
    THEN            reduce using rule 67 (expression -> BOOLEAN .)
    DO              reduce using rule 67 (expression -> BOOLEAN .)
    END             reduce using rule 67 (expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 67 (expression -> BOOLEAN .)
    ELSE            reduce using rule 67 (expression -> BOOLEAN .)
    TO              reduce using rule 67 (expression -> BOOLEAN .)
    DOWNTO          reduce using rule 67 (expression -> BOOLEAN .)


state 21

    (87) length -> LENGTH . LPAR identifier RPAR

    LPAR            shift and go to state 46


state 22

    (1) start -> PROGRAM identifier SEMICOLON main DOT .

    $end            reduce using rule 1 (start -> PROGRAM identifier SEMICOLON main DOT .)


state 23

    (2) main -> const_list var_list . statement_list
    (31) statement_list -> . BEGIN statement_seq END

    BEGIN           shift and go to state 48

    statement_list                 shift and go to state 47

state 24

    (11) var_list -> VAR . var_decls
    (13) var_decls -> . var_decls var_decl
    (14) var_decls -> . var_decl
    (15) var_decl -> . ident_list COLON type_decl SEMICOLON
    (16) ident_list -> . identifier COMMA ident_list
    (17) ident_list -> . identifier
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    var_decls                      shift and go to state 49
    var_decl                       shift and go to state 50
    ident_list                     shift and go to state 51
    identifier                     shift and go to state 52

state 25

    (12) var_list -> empty .

    BEGIN           reduce using rule 12 (var_list -> empty .)


state 26

    (3) const_list -> CONST const_decls .
    (5) const_decls -> const_decls . const_decl
    (7) const_decl -> . identifier EQUAL INTEGER SEMICOLON
    (8) const_decl -> . identifier EQUAL STRING SEMICOLON
    (9) const_decl -> . identifier EQUAL REAL SEMICOLON
    (10) const_decl -> . identifier EQUAL BOOLEAN SEMICOLON
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    VAR             reduce using rule 3 (const_list -> CONST const_decls .)
    BEGIN           reduce using rule 3 (const_list -> CONST const_decls .)
    IDENTIFIER      shift and go to state 4

    const_decl                     shift and go to state 53
    identifier                     shift and go to state 28

state 27

    (6) const_decls -> const_decl .

    IDENTIFIER      reduce using rule 6 (const_decls -> const_decl .)
    VAR             reduce using rule 6 (const_decls -> const_decl .)
    BEGIN           reduce using rule 6 (const_decls -> const_decl .)


state 28

    (7) const_decl -> identifier . EQUAL INTEGER SEMICOLON
    (8) const_decl -> identifier . EQUAL STRING SEMICOLON
    (9) const_decl -> identifier . EQUAL REAL SEMICOLON
    (10) const_decl -> identifier . EQUAL BOOLEAN SEMICOLON

    EQUAL           shift and go to state 54


state 29

    (29) identifier -> IDENTIFIER LBRACKET expression RBRACKET .

    SEMICOLON       reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIVISION        reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIV             reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    MOD             reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    LESS            reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    LEQ             reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    GEQ             reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    AND             reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    OR              reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    RPAR            reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    THEN            reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    DO              reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    END             reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    TO              reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    COLON           reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)
    DOT             reduce using rule 29 (identifier -> IDENTIFIER LBRACKET expression RBRACKET .)


state 30

    (45) expression -> expression PLUS . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 55
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 31

    (46) expression -> expression MINUS . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 56
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 32

    (47) expression -> expression TIMES . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 57
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 33

    (48) expression -> expression DIVISION . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 58
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 34

    (49) expression -> expression DIV . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 59
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 35

    (50) expression -> expression MOD . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 60
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 36

    (51) expression -> expression EQUAL . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 61
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 37

    (52) expression -> expression DIFFERENT . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 62
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 38

    (53) expression -> expression LESS . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 63
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 39

    (54) expression -> expression GREATER . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 64
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 40

    (55) expression -> expression LEQ . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 65
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 41

    (56) expression -> expression GEQ . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 66
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 42

    (57) expression -> expression AND . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 67
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 43

    (58) expression -> expression OR . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 68
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 44

    (59) expression -> NOT expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 59 (expression -> NOT expression .)
    PLUS            reduce using rule 59 (expression -> NOT expression .)
    MINUS           reduce using rule 59 (expression -> NOT expression .)
    TIMES           reduce using rule 59 (expression -> NOT expression .)
    DIVISION        reduce using rule 59 (expression -> NOT expression .)
    DIV             reduce using rule 59 (expression -> NOT expression .)
    MOD             reduce using rule 59 (expression -> NOT expression .)
    EQUAL           reduce using rule 59 (expression -> NOT expression .)
    DIFFERENT       reduce using rule 59 (expression -> NOT expression .)
    LESS            reduce using rule 59 (expression -> NOT expression .)
    GREATER         reduce using rule 59 (expression -> NOT expression .)
    LEQ             reduce using rule 59 (expression -> NOT expression .)
    GEQ             reduce using rule 59 (expression -> NOT expression .)
    AND             reduce using rule 59 (expression -> NOT expression .)
    OR              reduce using rule 59 (expression -> NOT expression .)
    RPAR            reduce using rule 59 (expression -> NOT expression .)
    THEN            reduce using rule 59 (expression -> NOT expression .)
    DO              reduce using rule 59 (expression -> NOT expression .)
    END             reduce using rule 59 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 59 (expression -> NOT expression .)
    ELSE            reduce using rule 59 (expression -> NOT expression .)
    TO              reduce using rule 59 (expression -> NOT expression .)
    DOWNTO          reduce using rule 59 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 34 ]
  ! MOD             [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 45

    (60) expression -> LPAR expression . RPAR
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RPAR            shift and go to state 69
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 46

    (87) length -> LENGTH LPAR . identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 70

state 47

    (2) main -> const_list var_list statement_list .

    DOT             reduce using rule 2 (main -> const_list var_list statement_list .)


state 48

    (31) statement_list -> BEGIN . statement_seq END
    (32) statement_seq -> . statement_seq SEMICOLON statement
    (33) statement_seq -> . statement_seq SEMICOLON
    (34) statement_seq -> . statement
    (35) statement -> . writeln
    (36) statement -> . write
    (37) statement -> . readln
    (38) statement -> . read
    (39) statement -> . assign
    (40) statement -> . if_stmt
    (41) statement -> . for_loop
    (42) statement -> . while_loop
    (43) statement -> . statement_list
    (73) writeln -> . WRITELN LPAR phrase RPAR
    (74) writeln -> . WRITELN
    (75) write -> . WRITE LPAR phrase RPAR
    (85) readln -> . READLN LPAR identifier RPAR
    (86) readln -> . READLN
    (84) read -> . READ LPAR identifier RPAR
    (44) assign -> . identifier ASSIGN expression
    (68) if_stmt -> . IF expression THEN statement
    (69) if_stmt -> . IF expression THEN statement ELSE statement
    (70) for_loop -> . FOR identifier ASSIGN expression TO expression DO statement
    (71) for_loop -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (72) while_loop -> . WHILE expression DO statement
    (31) statement_list -> . BEGIN statement_seq END
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    WRITELN         shift and go to state 82
    WRITE           shift and go to state 83
    READLN          shift and go to state 84
    READ            shift and go to state 86
    IF              shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    BEGIN           shift and go to state 48
    IDENTIFIER      shift and go to state 4

    statement_seq                  shift and go to state 71
    statement                      shift and go to state 72
    writeln                        shift and go to state 73
    write                          shift and go to state 74
    readln                         shift and go to state 75
    read                           shift and go to state 76
    assign                         shift and go to state 77
    if_stmt                        shift and go to state 78
    for_loop                       shift and go to state 79
    while_loop                     shift and go to state 80
    statement_list                 shift and go to state 81
    identifier                     shift and go to state 85

state 49

    (11) var_list -> VAR var_decls .
    (13) var_decls -> var_decls . var_decl
    (15) var_decl -> . ident_list COLON type_decl SEMICOLON
    (16) ident_list -> . identifier COMMA ident_list
    (17) ident_list -> . identifier
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    BEGIN           reduce using rule 11 (var_list -> VAR var_decls .)
    IDENTIFIER      shift and go to state 4

    var_decl                       shift and go to state 90
    ident_list                     shift and go to state 51
    identifier                     shift and go to state 52

state 50

    (14) var_decls -> var_decl .

    IDENTIFIER      reduce using rule 14 (var_decls -> var_decl .)
    BEGIN           reduce using rule 14 (var_decls -> var_decl .)


state 51

    (15) var_decl -> ident_list . COLON type_decl SEMICOLON

    COLON           shift and go to state 91


state 52

    (16) ident_list -> identifier . COMMA ident_list
    (17) ident_list -> identifier .

    COMMA           shift and go to state 92
    COLON           reduce using rule 17 (ident_list -> identifier .)


state 53

    (5) const_decls -> const_decls const_decl .

    IDENTIFIER      reduce using rule 5 (const_decls -> const_decls const_decl .)
    VAR             reduce using rule 5 (const_decls -> const_decls const_decl .)
    BEGIN           reduce using rule 5 (const_decls -> const_decls const_decl .)


state 54

    (7) const_decl -> identifier EQUAL . INTEGER SEMICOLON
    (8) const_decl -> identifier EQUAL . STRING SEMICOLON
    (9) const_decl -> identifier EQUAL . REAL SEMICOLON
    (10) const_decl -> identifier EQUAL . BOOLEAN SEMICOLON

    INTEGER         shift and go to state 93
    STRING          shift and go to state 94
    REAL            shift and go to state 95
    BOOLEAN         shift and go to state 96


state 55

    (45) expression -> expression PLUS expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 45 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 45 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 45 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 45 (expression -> expression PLUS expression .)
    DIFFERENT       reduce using rule 45 (expression -> expression PLUS expression .)
    LESS            reduce using rule 45 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 45 (expression -> expression PLUS expression .)
    LEQ             reduce using rule 45 (expression -> expression PLUS expression .)
    GEQ             reduce using rule 45 (expression -> expression PLUS expression .)
    AND             reduce using rule 45 (expression -> expression PLUS expression .)
    OR              reduce using rule 45 (expression -> expression PLUS expression .)
    RPAR            reduce using rule 45 (expression -> expression PLUS expression .)
    THEN            reduce using rule 45 (expression -> expression PLUS expression .)
    DO              reduce using rule 45 (expression -> expression PLUS expression .)
    END             reduce using rule 45 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 45 (expression -> expression PLUS expression .)
    TO              reduce using rule 45 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 45 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35

  ! TIMES           [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! DIVISION        [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 56

    (46) expression -> expression MINUS expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 46 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 46 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 46 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 46 (expression -> expression MINUS expression .)
    DIFFERENT       reduce using rule 46 (expression -> expression MINUS expression .)
    LESS            reduce using rule 46 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 46 (expression -> expression MINUS expression .)
    LEQ             reduce using rule 46 (expression -> expression MINUS expression .)
    GEQ             reduce using rule 46 (expression -> expression MINUS expression .)
    AND             reduce using rule 46 (expression -> expression MINUS expression .)
    OR              reduce using rule 46 (expression -> expression MINUS expression .)
    RPAR            reduce using rule 46 (expression -> expression MINUS expression .)
    THEN            reduce using rule 46 (expression -> expression MINUS expression .)
    DO              reduce using rule 46 (expression -> expression MINUS expression .)
    END             reduce using rule 46 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 46 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 46 (expression -> expression MINUS expression .)
    TO              reduce using rule 46 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 46 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35

  ! TIMES           [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! DIVISION        [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 57

    (47) expression -> expression TIMES expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 47 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 47 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 47 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 47 (expression -> expression TIMES expression .)
    DIVISION        reduce using rule 47 (expression -> expression TIMES expression .)
    DIV             reduce using rule 47 (expression -> expression TIMES expression .)
    MOD             reduce using rule 47 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 47 (expression -> expression TIMES expression .)
    DIFFERENT       reduce using rule 47 (expression -> expression TIMES expression .)
    LESS            reduce using rule 47 (expression -> expression TIMES expression .)
    GREATER         reduce using rule 47 (expression -> expression TIMES expression .)
    LEQ             reduce using rule 47 (expression -> expression TIMES expression .)
    GEQ             reduce using rule 47 (expression -> expression TIMES expression .)
    AND             reduce using rule 47 (expression -> expression TIMES expression .)
    OR              reduce using rule 47 (expression -> expression TIMES expression .)
    RPAR            reduce using rule 47 (expression -> expression TIMES expression .)
    THEN            reduce using rule 47 (expression -> expression TIMES expression .)
    DO              reduce using rule 47 (expression -> expression TIMES expression .)
    END             reduce using rule 47 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 47 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 47 (expression -> expression TIMES expression .)
    TO              reduce using rule 47 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 47 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 34 ]
  ! MOD             [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 58

    (48) expression -> expression DIVISION expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 48 (expression -> expression DIVISION expression .)
    PLUS            reduce using rule 48 (expression -> expression DIVISION expression .)
    MINUS           reduce using rule 48 (expression -> expression DIVISION expression .)
    TIMES           reduce using rule 48 (expression -> expression DIVISION expression .)
    DIVISION        reduce using rule 48 (expression -> expression DIVISION expression .)
    DIV             reduce using rule 48 (expression -> expression DIVISION expression .)
    MOD             reduce using rule 48 (expression -> expression DIVISION expression .)
    EQUAL           reduce using rule 48 (expression -> expression DIVISION expression .)
    DIFFERENT       reduce using rule 48 (expression -> expression DIVISION expression .)
    LESS            reduce using rule 48 (expression -> expression DIVISION expression .)
    GREATER         reduce using rule 48 (expression -> expression DIVISION expression .)
    LEQ             reduce using rule 48 (expression -> expression DIVISION expression .)
    GEQ             reduce using rule 48 (expression -> expression DIVISION expression .)
    AND             reduce using rule 48 (expression -> expression DIVISION expression .)
    OR              reduce using rule 48 (expression -> expression DIVISION expression .)
    RPAR            reduce using rule 48 (expression -> expression DIVISION expression .)
    THEN            reduce using rule 48 (expression -> expression DIVISION expression .)
    DO              reduce using rule 48 (expression -> expression DIVISION expression .)
    END             reduce using rule 48 (expression -> expression DIVISION expression .)
    SEMICOLON       reduce using rule 48 (expression -> expression DIVISION expression .)
    ELSE            reduce using rule 48 (expression -> expression DIVISION expression .)
    TO              reduce using rule 48 (expression -> expression DIVISION expression .)
    DOWNTO          reduce using rule 48 (expression -> expression DIVISION expression .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 34 ]
  ! MOD             [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 59

    (49) expression -> expression DIV expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 49 (expression -> expression DIV expression .)
    PLUS            reduce using rule 49 (expression -> expression DIV expression .)
    MINUS           reduce using rule 49 (expression -> expression DIV expression .)
    TIMES           reduce using rule 49 (expression -> expression DIV expression .)
    DIVISION        reduce using rule 49 (expression -> expression DIV expression .)
    DIV             reduce using rule 49 (expression -> expression DIV expression .)
    MOD             reduce using rule 49 (expression -> expression DIV expression .)
    EQUAL           reduce using rule 49 (expression -> expression DIV expression .)
    DIFFERENT       reduce using rule 49 (expression -> expression DIV expression .)
    LESS            reduce using rule 49 (expression -> expression DIV expression .)
    GREATER         reduce using rule 49 (expression -> expression DIV expression .)
    LEQ             reduce using rule 49 (expression -> expression DIV expression .)
    GEQ             reduce using rule 49 (expression -> expression DIV expression .)
    AND             reduce using rule 49 (expression -> expression DIV expression .)
    OR              reduce using rule 49 (expression -> expression DIV expression .)
    RPAR            reduce using rule 49 (expression -> expression DIV expression .)
    THEN            reduce using rule 49 (expression -> expression DIV expression .)
    DO              reduce using rule 49 (expression -> expression DIV expression .)
    END             reduce using rule 49 (expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression DIV expression .)
    ELSE            reduce using rule 49 (expression -> expression DIV expression .)
    TO              reduce using rule 49 (expression -> expression DIV expression .)
    DOWNTO          reduce using rule 49 (expression -> expression DIV expression .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 34 ]
  ! MOD             [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 60

    (50) expression -> expression MOD expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 50 (expression -> expression MOD expression .)
    PLUS            reduce using rule 50 (expression -> expression MOD expression .)
    MINUS           reduce using rule 50 (expression -> expression MOD expression .)
    TIMES           reduce using rule 50 (expression -> expression MOD expression .)
    DIVISION        reduce using rule 50 (expression -> expression MOD expression .)
    DIV             reduce using rule 50 (expression -> expression MOD expression .)
    MOD             reduce using rule 50 (expression -> expression MOD expression .)
    EQUAL           reduce using rule 50 (expression -> expression MOD expression .)
    DIFFERENT       reduce using rule 50 (expression -> expression MOD expression .)
    LESS            reduce using rule 50 (expression -> expression MOD expression .)
    GREATER         reduce using rule 50 (expression -> expression MOD expression .)
    LEQ             reduce using rule 50 (expression -> expression MOD expression .)
    GEQ             reduce using rule 50 (expression -> expression MOD expression .)
    AND             reduce using rule 50 (expression -> expression MOD expression .)
    OR              reduce using rule 50 (expression -> expression MOD expression .)
    RPAR            reduce using rule 50 (expression -> expression MOD expression .)
    THEN            reduce using rule 50 (expression -> expression MOD expression .)
    DO              reduce using rule 50 (expression -> expression MOD expression .)
    END             reduce using rule 50 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression MOD expression .)
    ELSE            reduce using rule 50 (expression -> expression MOD expression .)
    TO              reduce using rule 50 (expression -> expression MOD expression .)
    DOWNTO          reduce using rule 50 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! DIV             [ shift and go to state 34 ]
  ! MOD             [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 61

    (51) expression -> expression EQUAL expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 51 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 51 (expression -> expression EQUAL expression .)
    DIFFERENT       reduce using rule 51 (expression -> expression EQUAL expression .)
    LESS            reduce using rule 51 (expression -> expression EQUAL expression .)
    GREATER         reduce using rule 51 (expression -> expression EQUAL expression .)
    LEQ             reduce using rule 51 (expression -> expression EQUAL expression .)
    GEQ             reduce using rule 51 (expression -> expression EQUAL expression .)
    AND             reduce using rule 51 (expression -> expression EQUAL expression .)
    OR              reduce using rule 51 (expression -> expression EQUAL expression .)
    RPAR            reduce using rule 51 (expression -> expression EQUAL expression .)
    THEN            reduce using rule 51 (expression -> expression EQUAL expression .)
    DO              reduce using rule 51 (expression -> expression EQUAL expression .)
    END             reduce using rule 51 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 51 (expression -> expression EQUAL expression .)
    TO              reduce using rule 51 (expression -> expression EQUAL expression .)
    DOWNTO          reduce using rule 51 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35

  ! PLUS            [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! DIVISION        [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! DIV             [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 62

    (52) expression -> expression DIFFERENT expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 52 (expression -> expression DIFFERENT expression .)
    EQUAL           reduce using rule 52 (expression -> expression DIFFERENT expression .)
    DIFFERENT       reduce using rule 52 (expression -> expression DIFFERENT expression .)
    LESS            reduce using rule 52 (expression -> expression DIFFERENT expression .)
    GREATER         reduce using rule 52 (expression -> expression DIFFERENT expression .)
    LEQ             reduce using rule 52 (expression -> expression DIFFERENT expression .)
    GEQ             reduce using rule 52 (expression -> expression DIFFERENT expression .)
    AND             reduce using rule 52 (expression -> expression DIFFERENT expression .)
    OR              reduce using rule 52 (expression -> expression DIFFERENT expression .)
    RPAR            reduce using rule 52 (expression -> expression DIFFERENT expression .)
    THEN            reduce using rule 52 (expression -> expression DIFFERENT expression .)
    DO              reduce using rule 52 (expression -> expression DIFFERENT expression .)
    END             reduce using rule 52 (expression -> expression DIFFERENT expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression DIFFERENT expression .)
    ELSE            reduce using rule 52 (expression -> expression DIFFERENT expression .)
    TO              reduce using rule 52 (expression -> expression DIFFERENT expression .)
    DOWNTO          reduce using rule 52 (expression -> expression DIFFERENT expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35

  ! PLUS            [ reduce using rule 52 (expression -> expression DIFFERENT expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression DIFFERENT expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression DIFFERENT expression .) ]
  ! DIVISION        [ reduce using rule 52 (expression -> expression DIFFERENT expression .) ]
  ! DIV             [ reduce using rule 52 (expression -> expression DIFFERENT expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression DIFFERENT expression .) ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 63

    (53) expression -> expression LESS expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 53 (expression -> expression LESS expression .)
    EQUAL           reduce using rule 53 (expression -> expression LESS expression .)
    DIFFERENT       reduce using rule 53 (expression -> expression LESS expression .)
    LESS            reduce using rule 53 (expression -> expression LESS expression .)
    GREATER         reduce using rule 53 (expression -> expression LESS expression .)
    LEQ             reduce using rule 53 (expression -> expression LESS expression .)
    GEQ             reduce using rule 53 (expression -> expression LESS expression .)
    AND             reduce using rule 53 (expression -> expression LESS expression .)
    OR              reduce using rule 53 (expression -> expression LESS expression .)
    RPAR            reduce using rule 53 (expression -> expression LESS expression .)
    THEN            reduce using rule 53 (expression -> expression LESS expression .)
    DO              reduce using rule 53 (expression -> expression LESS expression .)
    END             reduce using rule 53 (expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression LESS expression .)
    ELSE            reduce using rule 53 (expression -> expression LESS expression .)
    TO              reduce using rule 53 (expression -> expression LESS expression .)
    DOWNTO          reduce using rule 53 (expression -> expression LESS expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35

  ! PLUS            [ reduce using rule 53 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression LESS expression .) ]
  ! DIVISION        [ reduce using rule 53 (expression -> expression LESS expression .) ]
  ! DIV             [ reduce using rule 53 (expression -> expression LESS expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression LESS expression .) ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 64

    (54) expression -> expression GREATER expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 54 (expression -> expression GREATER expression .)
    EQUAL           reduce using rule 54 (expression -> expression GREATER expression .)
    DIFFERENT       reduce using rule 54 (expression -> expression GREATER expression .)
    LESS            reduce using rule 54 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 54 (expression -> expression GREATER expression .)
    LEQ             reduce using rule 54 (expression -> expression GREATER expression .)
    GEQ             reduce using rule 54 (expression -> expression GREATER expression .)
    AND             reduce using rule 54 (expression -> expression GREATER expression .)
    OR              reduce using rule 54 (expression -> expression GREATER expression .)
    RPAR            reduce using rule 54 (expression -> expression GREATER expression .)
    THEN            reduce using rule 54 (expression -> expression GREATER expression .)
    DO              reduce using rule 54 (expression -> expression GREATER expression .)
    END             reduce using rule 54 (expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression GREATER expression .)
    ELSE            reduce using rule 54 (expression -> expression GREATER expression .)
    TO              reduce using rule 54 (expression -> expression GREATER expression .)
    DOWNTO          reduce using rule 54 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35

  ! PLUS            [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! DIVISION        [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! DIV             [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! MOD             [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 65

    (55) expression -> expression LEQ expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 55 (expression -> expression LEQ expression .)
    EQUAL           reduce using rule 55 (expression -> expression LEQ expression .)
    DIFFERENT       reduce using rule 55 (expression -> expression LEQ expression .)
    LESS            reduce using rule 55 (expression -> expression LEQ expression .)
    GREATER         reduce using rule 55 (expression -> expression LEQ expression .)
    LEQ             reduce using rule 55 (expression -> expression LEQ expression .)
    GEQ             reduce using rule 55 (expression -> expression LEQ expression .)
    AND             reduce using rule 55 (expression -> expression LEQ expression .)
    OR              reduce using rule 55 (expression -> expression LEQ expression .)
    RPAR            reduce using rule 55 (expression -> expression LEQ expression .)
    THEN            reduce using rule 55 (expression -> expression LEQ expression .)
    DO              reduce using rule 55 (expression -> expression LEQ expression .)
    END             reduce using rule 55 (expression -> expression LEQ expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression LEQ expression .)
    ELSE            reduce using rule 55 (expression -> expression LEQ expression .)
    TO              reduce using rule 55 (expression -> expression LEQ expression .)
    DOWNTO          reduce using rule 55 (expression -> expression LEQ expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35

  ! PLUS            [ reduce using rule 55 (expression -> expression LEQ expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression LEQ expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression LEQ expression .) ]
  ! DIVISION        [ reduce using rule 55 (expression -> expression LEQ expression .) ]
  ! DIV             [ reduce using rule 55 (expression -> expression LEQ expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression LEQ expression .) ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 66

    (56) expression -> expression GEQ expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 56 (expression -> expression GEQ expression .)
    EQUAL           reduce using rule 56 (expression -> expression GEQ expression .)
    DIFFERENT       reduce using rule 56 (expression -> expression GEQ expression .)
    LESS            reduce using rule 56 (expression -> expression GEQ expression .)
    GREATER         reduce using rule 56 (expression -> expression GEQ expression .)
    LEQ             reduce using rule 56 (expression -> expression GEQ expression .)
    GEQ             reduce using rule 56 (expression -> expression GEQ expression .)
    AND             reduce using rule 56 (expression -> expression GEQ expression .)
    OR              reduce using rule 56 (expression -> expression GEQ expression .)
    RPAR            reduce using rule 56 (expression -> expression GEQ expression .)
    THEN            reduce using rule 56 (expression -> expression GEQ expression .)
    DO              reduce using rule 56 (expression -> expression GEQ expression .)
    END             reduce using rule 56 (expression -> expression GEQ expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression GEQ expression .)
    ELSE            reduce using rule 56 (expression -> expression GEQ expression .)
    TO              reduce using rule 56 (expression -> expression GEQ expression .)
    DOWNTO          reduce using rule 56 (expression -> expression GEQ expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35

  ! PLUS            [ reduce using rule 56 (expression -> expression GEQ expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression GEQ expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression GEQ expression .) ]
  ! DIVISION        [ reduce using rule 56 (expression -> expression GEQ expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression GEQ expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression GEQ expression .) ]
  ! EQUAL           [ shift and go to state 36 ]
  ! DIFFERENT       [ shift and go to state 37 ]
  ! LESS            [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LEQ             [ shift and go to state 40 ]
  ! GEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 67

    (57) expression -> expression AND expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 57 (expression -> expression AND expression .)
    AND             reduce using rule 57 (expression -> expression AND expression .)
    OR              reduce using rule 57 (expression -> expression AND expression .)
    RPAR            reduce using rule 57 (expression -> expression AND expression .)
    THEN            reduce using rule 57 (expression -> expression AND expression .)
    DO              reduce using rule 57 (expression -> expression AND expression .)
    END             reduce using rule 57 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression AND expression .)
    ELSE            reduce using rule 57 (expression -> expression AND expression .)
    TO              reduce using rule 57 (expression -> expression AND expression .)
    DOWNTO          reduce using rule 57 (expression -> expression AND expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41

  ! PLUS            [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! DIVISION        [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! DIFFERENT       [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! LEQ             [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! GEQ             [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 68

    (58) expression -> expression OR expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    RBRACKET        reduce using rule 58 (expression -> expression OR expression .)
    OR              reduce using rule 58 (expression -> expression OR expression .)
    RPAR            reduce using rule 58 (expression -> expression OR expression .)
    THEN            reduce using rule 58 (expression -> expression OR expression .)
    DO              reduce using rule 58 (expression -> expression OR expression .)
    END             reduce using rule 58 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression OR expression .)
    ELSE            reduce using rule 58 (expression -> expression OR expression .)
    TO              reduce using rule 58 (expression -> expression OR expression .)
    DOWNTO          reduce using rule 58 (expression -> expression OR expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42

  ! PLUS            [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! DIVISION        [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! DIFFERENT       [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! LEQ             [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! GEQ             [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 43 ]


state 69

    (60) expression -> LPAR expression RPAR .

    RBRACKET        reduce using rule 60 (expression -> LPAR expression RPAR .)
    PLUS            reduce using rule 60 (expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 60 (expression -> LPAR expression RPAR .)
    TIMES           reduce using rule 60 (expression -> LPAR expression RPAR .)
    DIVISION        reduce using rule 60 (expression -> LPAR expression RPAR .)
    DIV             reduce using rule 60 (expression -> LPAR expression RPAR .)
    MOD             reduce using rule 60 (expression -> LPAR expression RPAR .)
    EQUAL           reduce using rule 60 (expression -> LPAR expression RPAR .)
    DIFFERENT       reduce using rule 60 (expression -> LPAR expression RPAR .)
    LESS            reduce using rule 60 (expression -> LPAR expression RPAR .)
    GREATER         reduce using rule 60 (expression -> LPAR expression RPAR .)
    LEQ             reduce using rule 60 (expression -> LPAR expression RPAR .)
    GEQ             reduce using rule 60 (expression -> LPAR expression RPAR .)
    AND             reduce using rule 60 (expression -> LPAR expression RPAR .)
    OR              reduce using rule 60 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 60 (expression -> LPAR expression RPAR .)
    THEN            reduce using rule 60 (expression -> LPAR expression RPAR .)
    DO              reduce using rule 60 (expression -> LPAR expression RPAR .)
    END             reduce using rule 60 (expression -> LPAR expression RPAR .)
    SEMICOLON       reduce using rule 60 (expression -> LPAR expression RPAR .)
    ELSE            reduce using rule 60 (expression -> LPAR expression RPAR .)
    TO              reduce using rule 60 (expression -> LPAR expression RPAR .)
    DOWNTO          reduce using rule 60 (expression -> LPAR expression RPAR .)


state 70

    (87) length -> LENGTH LPAR identifier . RPAR

    RPAR            shift and go to state 97


state 71

    (31) statement_list -> BEGIN statement_seq . END
    (32) statement_seq -> statement_seq . SEMICOLON statement
    (33) statement_seq -> statement_seq . SEMICOLON

    END             shift and go to state 98
    SEMICOLON       shift and go to state 99


state 72

    (34) statement_seq -> statement .

    END             reduce using rule 34 (statement_seq -> statement .)
    SEMICOLON       reduce using rule 34 (statement_seq -> statement .)


state 73

    (35) statement -> writeln .

    END             reduce using rule 35 (statement -> writeln .)
    SEMICOLON       reduce using rule 35 (statement -> writeln .)
    ELSE            reduce using rule 35 (statement -> writeln .)


state 74

    (36) statement -> write .

    END             reduce using rule 36 (statement -> write .)
    SEMICOLON       reduce using rule 36 (statement -> write .)
    ELSE            reduce using rule 36 (statement -> write .)


state 75

    (37) statement -> readln .

    END             reduce using rule 37 (statement -> readln .)
    SEMICOLON       reduce using rule 37 (statement -> readln .)
    ELSE            reduce using rule 37 (statement -> readln .)


state 76

    (38) statement -> read .

    END             reduce using rule 38 (statement -> read .)
    SEMICOLON       reduce using rule 38 (statement -> read .)
    ELSE            reduce using rule 38 (statement -> read .)


state 77

    (39) statement -> assign .

    END             reduce using rule 39 (statement -> assign .)
    SEMICOLON       reduce using rule 39 (statement -> assign .)
    ELSE            reduce using rule 39 (statement -> assign .)


state 78

    (40) statement -> if_stmt .

    END             reduce using rule 40 (statement -> if_stmt .)
    SEMICOLON       reduce using rule 40 (statement -> if_stmt .)
    ELSE            reduce using rule 40 (statement -> if_stmt .)


state 79

    (41) statement -> for_loop .

    END             reduce using rule 41 (statement -> for_loop .)
    SEMICOLON       reduce using rule 41 (statement -> for_loop .)
    ELSE            reduce using rule 41 (statement -> for_loop .)


state 80

    (42) statement -> while_loop .

    END             reduce using rule 42 (statement -> while_loop .)
    SEMICOLON       reduce using rule 42 (statement -> while_loop .)
    ELSE            reduce using rule 42 (statement -> while_loop .)


state 81

    (43) statement -> statement_list .

    END             reduce using rule 43 (statement -> statement_list .)
    SEMICOLON       reduce using rule 43 (statement -> statement_list .)
    ELSE            reduce using rule 43 (statement -> statement_list .)


state 82

    (73) writeln -> WRITELN . LPAR phrase RPAR
    (74) writeln -> WRITELN .

    LPAR            shift and go to state 100
    END             reduce using rule 74 (writeln -> WRITELN .)
    SEMICOLON       reduce using rule 74 (writeln -> WRITELN .)
    ELSE            reduce using rule 74 (writeln -> WRITELN .)


state 83

    (75) write -> WRITE . LPAR phrase RPAR

    LPAR            shift and go to state 101


state 84

    (85) readln -> READLN . LPAR identifier RPAR
    (86) readln -> READLN .

    LPAR            shift and go to state 102
    END             reduce using rule 86 (readln -> READLN .)
    SEMICOLON       reduce using rule 86 (readln -> READLN .)
    ELSE            reduce using rule 86 (readln -> READLN .)


state 85

    (44) assign -> identifier . ASSIGN expression

    ASSIGN          shift and go to state 103


state 86

    (84) read -> READ . LPAR identifier RPAR

    LPAR            shift and go to state 104


state 87

    (68) if_stmt -> IF . expression THEN statement
    (69) if_stmt -> IF . expression THEN statement ELSE statement
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 105
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 88

    (70) for_loop -> FOR . identifier ASSIGN expression TO expression DO statement
    (71) for_loop -> FOR . identifier ASSIGN expression DOWNTO expression DO statement
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 106

state 89

    (72) while_loop -> WHILE . expression DO statement
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    expression                     shift and go to state 107
    length                         shift and go to state 14
    identifier                     shift and go to state 15

state 90

    (13) var_decls -> var_decls var_decl .

    IDENTIFIER      reduce using rule 13 (var_decls -> var_decls var_decl .)
    BEGIN           reduce using rule 13 (var_decls -> var_decls var_decl .)


state 91

    (15) var_decl -> ident_list COLON . type_decl SEMICOLON
    (18) type_decl -> . ARRAY LBRACKET INTEGER DOT DOT INTEGER RBRACKET OF type
    (19) type_decl -> . ARRAY LBRACKET identifier DOT DOT identifier RBRACKET OF type
    (20) type_decl -> . ARRAY LBRACKET INTEGER DOT DOT identifier RBRACKET OF type
    (21) type_decl -> . ARRAY LBRACKET identifier DOT DOT INTEGER RBRACKET OF type
    (22) type_decl -> . type
    (23) type -> . IDENTIFIER
    (24) type -> . TREAL
    (25) type -> . TINTEGER
    (26) type -> . TSTRING
    (27) type -> . TCHAR
    (28) type -> . TBOOLEAN

    ARRAY           shift and go to state 109
    IDENTIFIER      shift and go to state 111
    TREAL           shift and go to state 112
    TINTEGER        shift and go to state 113
    TSTRING         shift and go to state 114
    TCHAR           shift and go to state 115
    TBOOLEAN        shift and go to state 116

    type_decl                      shift and go to state 108
    type                           shift and go to state 110

state 92

    (16) ident_list -> identifier COMMA . ident_list
    (16) ident_list -> . identifier COMMA ident_list
    (17) ident_list -> . identifier
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 52
    ident_list                     shift and go to state 117

state 93

    (7) const_decl -> identifier EQUAL INTEGER . SEMICOLON

    SEMICOLON       shift and go to state 118


state 94

    (8) const_decl -> identifier EQUAL STRING . SEMICOLON

    SEMICOLON       shift and go to state 119


state 95

    (9) const_decl -> identifier EQUAL REAL . SEMICOLON

    SEMICOLON       shift and go to state 120


state 96

    (10) const_decl -> identifier EQUAL BOOLEAN . SEMICOLON

    SEMICOLON       shift and go to state 121


state 97

    (87) length -> LENGTH LPAR identifier RPAR .

    RBRACKET        reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    PLUS            reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    MINUS           reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    TIMES           reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    DIVISION        reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    DIV             reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    MOD             reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    EQUAL           reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    DIFFERENT       reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    LESS            reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    GREATER         reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    LEQ             reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    GEQ             reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    AND             reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    OR              reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    RPAR            reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    THEN            reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    DO              reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    END             reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    SEMICOLON       reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    ELSE            reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    TO              reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)
    DOWNTO          reduce using rule 87 (length -> LENGTH LPAR identifier RPAR .)


state 98

    (31) statement_list -> BEGIN statement_seq END .

    DOT             reduce using rule 31 (statement_list -> BEGIN statement_seq END .)
    END             reduce using rule 31 (statement_list -> BEGIN statement_seq END .)
    SEMICOLON       reduce using rule 31 (statement_list -> BEGIN statement_seq END .)
    ELSE            reduce using rule 31 (statement_list -> BEGIN statement_seq END .)


state 99

    (32) statement_seq -> statement_seq SEMICOLON . statement
    (33) statement_seq -> statement_seq SEMICOLON .
    (35) statement -> . writeln
    (36) statement -> . write
    (37) statement -> . readln
    (38) statement -> . read
    (39) statement -> . assign
    (40) statement -> . if_stmt
    (41) statement -> . for_loop
    (42) statement -> . while_loop
    (43) statement -> . statement_list
    (73) writeln -> . WRITELN LPAR phrase RPAR
    (74) writeln -> . WRITELN
    (75) write -> . WRITE LPAR phrase RPAR
    (85) readln -> . READLN LPAR identifier RPAR
    (86) readln -> . READLN
    (84) read -> . READ LPAR identifier RPAR
    (44) assign -> . identifier ASSIGN expression
    (68) if_stmt -> . IF expression THEN statement
    (69) if_stmt -> . IF expression THEN statement ELSE statement
    (70) for_loop -> . FOR identifier ASSIGN expression TO expression DO statement
    (71) for_loop -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (72) while_loop -> . WHILE expression DO statement
    (31) statement_list -> . BEGIN statement_seq END
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    END             reduce using rule 33 (statement_seq -> statement_seq SEMICOLON .)
    SEMICOLON       reduce using rule 33 (statement_seq -> statement_seq SEMICOLON .)
    WRITELN         shift and go to state 82
    WRITE           shift and go to state 83
    READLN          shift and go to state 84
    READ            shift and go to state 86
    IF              shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    BEGIN           shift and go to state 48
    IDENTIFIER      shift and go to state 4

    statement                      shift and go to state 122
    writeln                        shift and go to state 73
    write                          shift and go to state 74
    readln                         shift and go to state 75
    read                           shift and go to state 76
    assign                         shift and go to state 77
    if_stmt                        shift and go to state 78
    for_loop                       shift and go to state 79
    while_loop                     shift and go to state 80
    statement_list                 shift and go to state 81
    identifier                     shift and go to state 85

state 100

    (73) writeln -> WRITELN LPAR . phrase RPAR
    (76) phrase -> . phrase_list
    (77) phrase_list -> . phrase_list COMMA phrase_item
    (78) phrase_list -> . phrase_item
    (79) phrase_item -> . STRING
    (80) phrase_item -> . CHAR
    (81) phrase_item -> . identifier
    (82) phrase_item -> . INTEGER
    (83) phrase_item -> . REAL
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    STRING          shift and go to state 126
    CHAR            shift and go to state 127
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    IDENTIFIER      shift and go to state 4

    phrase                         shift and go to state 123
    phrase_list                    shift and go to state 124
    phrase_item                    shift and go to state 125
    identifier                     shift and go to state 128

state 101

    (75) write -> WRITE LPAR . phrase RPAR
    (76) phrase -> . phrase_list
    (77) phrase_list -> . phrase_list COMMA phrase_item
    (78) phrase_list -> . phrase_item
    (79) phrase_item -> . STRING
    (80) phrase_item -> . CHAR
    (81) phrase_item -> . identifier
    (82) phrase_item -> . INTEGER
    (83) phrase_item -> . REAL
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    STRING          shift and go to state 126
    CHAR            shift and go to state 127
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    IDENTIFIER      shift and go to state 4

    phrase                         shift and go to state 131
    phrase_list                    shift and go to state 124
    phrase_item                    shift and go to state 125
    identifier                     shift and go to state 128

state 102

    (85) readln -> READLN LPAR . identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 132

state 103

    (44) assign -> identifier ASSIGN . expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 15
    expression                     shift and go to state 133
    length                         shift and go to state 14

state 104

    (84) read -> READ LPAR . identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 134

state 105

    (68) if_stmt -> IF expression . THEN statement
    (69) if_stmt -> IF expression . THEN statement ELSE statement
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    THEN            shift and go to state 135
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 106

    (70) for_loop -> FOR identifier . ASSIGN expression TO expression DO statement
    (71) for_loop -> FOR identifier . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 136


state 107

    (72) while_loop -> WHILE expression . DO statement
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    DO              shift and go to state 137
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 108

    (15) var_decl -> ident_list COLON type_decl . SEMICOLON

    SEMICOLON       shift and go to state 138


state 109

    (18) type_decl -> ARRAY . LBRACKET INTEGER DOT DOT INTEGER RBRACKET OF type
    (19) type_decl -> ARRAY . LBRACKET identifier DOT DOT identifier RBRACKET OF type
    (20) type_decl -> ARRAY . LBRACKET INTEGER DOT DOT identifier RBRACKET OF type
    (21) type_decl -> ARRAY . LBRACKET identifier DOT DOT INTEGER RBRACKET OF type

    LBRACKET        shift and go to state 139


state 110

    (22) type_decl -> type .

    SEMICOLON       reduce using rule 22 (type_decl -> type .)


state 111

    (23) type -> IDENTIFIER .

    SEMICOLON       reduce using rule 23 (type -> IDENTIFIER .)


state 112

    (24) type -> TREAL .

    SEMICOLON       reduce using rule 24 (type -> TREAL .)


state 113

    (25) type -> TINTEGER .

    SEMICOLON       reduce using rule 25 (type -> TINTEGER .)


state 114

    (26) type -> TSTRING .

    SEMICOLON       reduce using rule 26 (type -> TSTRING .)


state 115

    (27) type -> TCHAR .

    SEMICOLON       reduce using rule 27 (type -> TCHAR .)


state 116

    (28) type -> TBOOLEAN .

    SEMICOLON       reduce using rule 28 (type -> TBOOLEAN .)


state 117

    (16) ident_list -> identifier COMMA ident_list .

    COLON           reduce using rule 16 (ident_list -> identifier COMMA ident_list .)


state 118

    (7) const_decl -> identifier EQUAL INTEGER SEMICOLON .

    IDENTIFIER      reduce using rule 7 (const_decl -> identifier EQUAL INTEGER SEMICOLON .)
    VAR             reduce using rule 7 (const_decl -> identifier EQUAL INTEGER SEMICOLON .)
    BEGIN           reduce using rule 7 (const_decl -> identifier EQUAL INTEGER SEMICOLON .)


state 119

    (8) const_decl -> identifier EQUAL STRING SEMICOLON .

    IDENTIFIER      reduce using rule 8 (const_decl -> identifier EQUAL STRING SEMICOLON .)
    VAR             reduce using rule 8 (const_decl -> identifier EQUAL STRING SEMICOLON .)
    BEGIN           reduce using rule 8 (const_decl -> identifier EQUAL STRING SEMICOLON .)


state 120

    (9) const_decl -> identifier EQUAL REAL SEMICOLON .

    IDENTIFIER      reduce using rule 9 (const_decl -> identifier EQUAL REAL SEMICOLON .)
    VAR             reduce using rule 9 (const_decl -> identifier EQUAL REAL SEMICOLON .)
    BEGIN           reduce using rule 9 (const_decl -> identifier EQUAL REAL SEMICOLON .)


state 121

    (10) const_decl -> identifier EQUAL BOOLEAN SEMICOLON .

    IDENTIFIER      reduce using rule 10 (const_decl -> identifier EQUAL BOOLEAN SEMICOLON .)
    VAR             reduce using rule 10 (const_decl -> identifier EQUAL BOOLEAN SEMICOLON .)
    BEGIN           reduce using rule 10 (const_decl -> identifier EQUAL BOOLEAN SEMICOLON .)


state 122

    (32) statement_seq -> statement_seq SEMICOLON statement .

    END             reduce using rule 32 (statement_seq -> statement_seq SEMICOLON statement .)
    SEMICOLON       reduce using rule 32 (statement_seq -> statement_seq SEMICOLON statement .)


state 123

    (73) writeln -> WRITELN LPAR phrase . RPAR

    RPAR            shift and go to state 140


state 124

    (76) phrase -> phrase_list .
    (77) phrase_list -> phrase_list . COMMA phrase_item

    RPAR            reduce using rule 76 (phrase -> phrase_list .)
    COMMA           shift and go to state 141


state 125

    (78) phrase_list -> phrase_item .

    COMMA           reduce using rule 78 (phrase_list -> phrase_item .)
    RPAR            reduce using rule 78 (phrase_list -> phrase_item .)


state 126

    (79) phrase_item -> STRING .

    COMMA           reduce using rule 79 (phrase_item -> STRING .)
    RPAR            reduce using rule 79 (phrase_item -> STRING .)


state 127

    (80) phrase_item -> CHAR .

    COMMA           reduce using rule 80 (phrase_item -> CHAR .)
    RPAR            reduce using rule 80 (phrase_item -> CHAR .)


state 128

    (81) phrase_item -> identifier .

    COMMA           reduce using rule 81 (phrase_item -> identifier .)
    RPAR            reduce using rule 81 (phrase_item -> identifier .)


state 129

    (82) phrase_item -> INTEGER .

    COMMA           reduce using rule 82 (phrase_item -> INTEGER .)
    RPAR            reduce using rule 82 (phrase_item -> INTEGER .)


state 130

    (83) phrase_item -> REAL .

    COMMA           reduce using rule 83 (phrase_item -> REAL .)
    RPAR            reduce using rule 83 (phrase_item -> REAL .)


state 131

    (75) write -> WRITE LPAR phrase . RPAR

    RPAR            shift and go to state 142


state 132

    (85) readln -> READLN LPAR identifier . RPAR

    RPAR            shift and go to state 143


state 133

    (44) assign -> identifier ASSIGN expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    END             reduce using rule 44 (assign -> identifier ASSIGN expression .)
    SEMICOLON       reduce using rule 44 (assign -> identifier ASSIGN expression .)
    ELSE            reduce using rule 44 (assign -> identifier ASSIGN expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 134

    (84) read -> READ LPAR identifier . RPAR

    RPAR            shift and go to state 144


state 135

    (68) if_stmt -> IF expression THEN . statement
    (69) if_stmt -> IF expression THEN . statement ELSE statement
    (35) statement -> . writeln
    (36) statement -> . write
    (37) statement -> . readln
    (38) statement -> . read
    (39) statement -> . assign
    (40) statement -> . if_stmt
    (41) statement -> . for_loop
    (42) statement -> . while_loop
    (43) statement -> . statement_list
    (73) writeln -> . WRITELN LPAR phrase RPAR
    (74) writeln -> . WRITELN
    (75) write -> . WRITE LPAR phrase RPAR
    (85) readln -> . READLN LPAR identifier RPAR
    (86) readln -> . READLN
    (84) read -> . READ LPAR identifier RPAR
    (44) assign -> . identifier ASSIGN expression
    (68) if_stmt -> . IF expression THEN statement
    (69) if_stmt -> . IF expression THEN statement ELSE statement
    (70) for_loop -> . FOR identifier ASSIGN expression TO expression DO statement
    (71) for_loop -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (72) while_loop -> . WHILE expression DO statement
    (31) statement_list -> . BEGIN statement_seq END
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    WRITELN         shift and go to state 82
    WRITE           shift and go to state 83
    READLN          shift and go to state 84
    READ            shift and go to state 86
    IF              shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    BEGIN           shift and go to state 48
    IDENTIFIER      shift and go to state 4

    statement                      shift and go to state 145
    writeln                        shift and go to state 73
    write                          shift and go to state 74
    readln                         shift and go to state 75
    read                           shift and go to state 76
    assign                         shift and go to state 77
    if_stmt                        shift and go to state 78
    for_loop                       shift and go to state 79
    while_loop                     shift and go to state 80
    statement_list                 shift and go to state 81
    identifier                     shift and go to state 85

state 136

    (70) for_loop -> FOR identifier ASSIGN . expression TO expression DO statement
    (71) for_loop -> FOR identifier ASSIGN . expression DOWNTO expression DO statement
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 15
    expression                     shift and go to state 146
    length                         shift and go to state 14

state 137

    (72) while_loop -> WHILE expression DO . statement
    (35) statement -> . writeln
    (36) statement -> . write
    (37) statement -> . readln
    (38) statement -> . read
    (39) statement -> . assign
    (40) statement -> . if_stmt
    (41) statement -> . for_loop
    (42) statement -> . while_loop
    (43) statement -> . statement_list
    (73) writeln -> . WRITELN LPAR phrase RPAR
    (74) writeln -> . WRITELN
    (75) write -> . WRITE LPAR phrase RPAR
    (85) readln -> . READLN LPAR identifier RPAR
    (86) readln -> . READLN
    (84) read -> . READ LPAR identifier RPAR
    (44) assign -> . identifier ASSIGN expression
    (68) if_stmt -> . IF expression THEN statement
    (69) if_stmt -> . IF expression THEN statement ELSE statement
    (70) for_loop -> . FOR identifier ASSIGN expression TO expression DO statement
    (71) for_loop -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (72) while_loop -> . WHILE expression DO statement
    (31) statement_list -> . BEGIN statement_seq END
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    WRITELN         shift and go to state 82
    WRITE           shift and go to state 83
    READLN          shift and go to state 84
    READ            shift and go to state 86
    IF              shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    BEGIN           shift and go to state 48
    IDENTIFIER      shift and go to state 4

    statement                      shift and go to state 147
    writeln                        shift and go to state 73
    write                          shift and go to state 74
    readln                         shift and go to state 75
    read                           shift and go to state 76
    assign                         shift and go to state 77
    if_stmt                        shift and go to state 78
    for_loop                       shift and go to state 79
    while_loop                     shift and go to state 80
    statement_list                 shift and go to state 81
    identifier                     shift and go to state 85

state 138

    (15) var_decl -> ident_list COLON type_decl SEMICOLON .

    IDENTIFIER      reduce using rule 15 (var_decl -> ident_list COLON type_decl SEMICOLON .)
    BEGIN           reduce using rule 15 (var_decl -> ident_list COLON type_decl SEMICOLON .)


state 139

    (18) type_decl -> ARRAY LBRACKET . INTEGER DOT DOT INTEGER RBRACKET OF type
    (19) type_decl -> ARRAY LBRACKET . identifier DOT DOT identifier RBRACKET OF type
    (20) type_decl -> ARRAY LBRACKET . INTEGER DOT DOT identifier RBRACKET OF type
    (21) type_decl -> ARRAY LBRACKET . identifier DOT DOT INTEGER RBRACKET OF type
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 148
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 149

state 140

    (73) writeln -> WRITELN LPAR phrase RPAR .

    END             reduce using rule 73 (writeln -> WRITELN LPAR phrase RPAR .)
    SEMICOLON       reduce using rule 73 (writeln -> WRITELN LPAR phrase RPAR .)
    ELSE            reduce using rule 73 (writeln -> WRITELN LPAR phrase RPAR .)


state 141

    (77) phrase_list -> phrase_list COMMA . phrase_item
    (79) phrase_item -> . STRING
    (80) phrase_item -> . CHAR
    (81) phrase_item -> . identifier
    (82) phrase_item -> . INTEGER
    (83) phrase_item -> . REAL
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    STRING          shift and go to state 126
    CHAR            shift and go to state 127
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    IDENTIFIER      shift and go to state 4

    phrase_item                    shift and go to state 150
    identifier                     shift and go to state 128

state 142

    (75) write -> WRITE LPAR phrase RPAR .

    END             reduce using rule 75 (write -> WRITE LPAR phrase RPAR .)
    SEMICOLON       reduce using rule 75 (write -> WRITE LPAR phrase RPAR .)
    ELSE            reduce using rule 75 (write -> WRITE LPAR phrase RPAR .)


state 143

    (85) readln -> READLN LPAR identifier RPAR .

    END             reduce using rule 85 (readln -> READLN LPAR identifier RPAR .)
    SEMICOLON       reduce using rule 85 (readln -> READLN LPAR identifier RPAR .)
    ELSE            reduce using rule 85 (readln -> READLN LPAR identifier RPAR .)


state 144

    (84) read -> READ LPAR identifier RPAR .

    END             reduce using rule 84 (read -> READ LPAR identifier RPAR .)
    SEMICOLON       reduce using rule 84 (read -> READ LPAR identifier RPAR .)
    ELSE            reduce using rule 84 (read -> READ LPAR identifier RPAR .)


state 145

    (68) if_stmt -> IF expression THEN statement .
    (69) if_stmt -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 68 (if_stmt -> IF expression THEN statement .)
    SEMICOLON       reduce using rule 68 (if_stmt -> IF expression THEN statement .)
    ELSE            shift and go to state 151

  ! ELSE            [ reduce using rule 68 (if_stmt -> IF expression THEN statement .) ]


state 146

    (70) for_loop -> FOR identifier ASSIGN expression . TO expression DO statement
    (71) for_loop -> FOR identifier ASSIGN expression . DOWNTO expression DO statement
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    TO              shift and go to state 152
    DOWNTO          shift and go to state 153
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 147

    (72) while_loop -> WHILE expression DO statement .

    END             reduce using rule 72 (while_loop -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 72 (while_loop -> WHILE expression DO statement .)
    ELSE            reduce using rule 72 (while_loop -> WHILE expression DO statement .)


state 148

    (18) type_decl -> ARRAY LBRACKET INTEGER . DOT DOT INTEGER RBRACKET OF type
    (20) type_decl -> ARRAY LBRACKET INTEGER . DOT DOT identifier RBRACKET OF type

    DOT             shift and go to state 154


state 149

    (19) type_decl -> ARRAY LBRACKET identifier . DOT DOT identifier RBRACKET OF type
    (21) type_decl -> ARRAY LBRACKET identifier . DOT DOT INTEGER RBRACKET OF type

    DOT             shift and go to state 155


state 150

    (77) phrase_list -> phrase_list COMMA phrase_item .

    COMMA           reduce using rule 77 (phrase_list -> phrase_list COMMA phrase_item .)
    RPAR            reduce using rule 77 (phrase_list -> phrase_list COMMA phrase_item .)


state 151

    (69) if_stmt -> IF expression THEN statement ELSE . statement
    (35) statement -> . writeln
    (36) statement -> . write
    (37) statement -> . readln
    (38) statement -> . read
    (39) statement -> . assign
    (40) statement -> . if_stmt
    (41) statement -> . for_loop
    (42) statement -> . while_loop
    (43) statement -> . statement_list
    (73) writeln -> . WRITELN LPAR phrase RPAR
    (74) writeln -> . WRITELN
    (75) write -> . WRITE LPAR phrase RPAR
    (85) readln -> . READLN LPAR identifier RPAR
    (86) readln -> . READLN
    (84) read -> . READ LPAR identifier RPAR
    (44) assign -> . identifier ASSIGN expression
    (68) if_stmt -> . IF expression THEN statement
    (69) if_stmt -> . IF expression THEN statement ELSE statement
    (70) for_loop -> . FOR identifier ASSIGN expression TO expression DO statement
    (71) for_loop -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (72) while_loop -> . WHILE expression DO statement
    (31) statement_list -> . BEGIN statement_seq END
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    WRITELN         shift and go to state 82
    WRITE           shift and go to state 83
    READLN          shift and go to state 84
    READ            shift and go to state 86
    IF              shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    BEGIN           shift and go to state 48
    IDENTIFIER      shift and go to state 4

    statement                      shift and go to state 156
    writeln                        shift and go to state 73
    write                          shift and go to state 74
    readln                         shift and go to state 75
    read                           shift and go to state 76
    assign                         shift and go to state 77
    if_stmt                        shift and go to state 78
    for_loop                       shift and go to state 79
    while_loop                     shift and go to state 80
    statement_list                 shift and go to state 81
    identifier                     shift and go to state 85

state 152

    (70) for_loop -> FOR identifier ASSIGN expression TO . expression DO statement
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 15
    expression                     shift and go to state 157
    length                         shift and go to state 14

state 153

    (71) for_loop -> FOR identifier ASSIGN expression DOWNTO . expression DO statement
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVISION expression
    (49) expression -> . expression DIV expression
    (50) expression -> . expression MOD expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression DIFFERENT expression
    (53) expression -> . expression LESS expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LEQ expression
    (56) expression -> . expression GEQ expression
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . NOT expression
    (60) expression -> . LPAR expression RPAR
    (61) expression -> . length
    (62) expression -> . identifier
    (63) expression -> . INTEGER
    (64) expression -> . REAL
    (65) expression -> . CHAR
    (66) expression -> . STRING
    (67) expression -> . BOOLEAN
    (87) length -> . LENGTH LPAR identifier RPAR
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    NOT             shift and go to state 12
    LPAR            shift and go to state 13
    INTEGER         shift and go to state 16
    REAL            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 20
    LENGTH          shift and go to state 21
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 15
    expression                     shift and go to state 158
    length                         shift and go to state 14

state 154

    (18) type_decl -> ARRAY LBRACKET INTEGER DOT . DOT INTEGER RBRACKET OF type
    (20) type_decl -> ARRAY LBRACKET INTEGER DOT . DOT identifier RBRACKET OF type

    DOT             shift and go to state 159


state 155

    (19) type_decl -> ARRAY LBRACKET identifier DOT . DOT identifier RBRACKET OF type
    (21) type_decl -> ARRAY LBRACKET identifier DOT . DOT INTEGER RBRACKET OF type

    DOT             shift and go to state 160


state 156

    (69) if_stmt -> IF expression THEN statement ELSE statement .

    END             reduce using rule 69 (if_stmt -> IF expression THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 69 (if_stmt -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 69 (if_stmt -> IF expression THEN statement ELSE statement .)


state 157

    (70) for_loop -> FOR identifier ASSIGN expression TO expression . DO statement
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    DO              shift and go to state 161
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 158

    (71) for_loop -> FOR identifier ASSIGN expression DOWNTO expression . DO statement
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVISION expression
    (49) expression -> expression . DIV expression
    (50) expression -> expression . MOD expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . DIFFERENT expression
    (53) expression -> expression . LESS expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LEQ expression
    (56) expression -> expression . GEQ expression
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression

    DO              shift and go to state 162
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVISION        shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    EQUAL           shift and go to state 36
    DIFFERENT       shift and go to state 37
    LESS            shift and go to state 38
    GREATER         shift and go to state 39
    LEQ             shift and go to state 40
    GEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 159

    (18) type_decl -> ARRAY LBRACKET INTEGER DOT DOT . INTEGER RBRACKET OF type
    (20) type_decl -> ARRAY LBRACKET INTEGER DOT DOT . identifier RBRACKET OF type
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 163
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 164

state 160

    (19) type_decl -> ARRAY LBRACKET identifier DOT DOT . identifier RBRACKET OF type
    (21) type_decl -> ARRAY LBRACKET identifier DOT DOT . INTEGER RBRACKET OF type
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 166
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 165

state 161

    (70) for_loop -> FOR identifier ASSIGN expression TO expression DO . statement
    (35) statement -> . writeln
    (36) statement -> . write
    (37) statement -> . readln
    (38) statement -> . read
    (39) statement -> . assign
    (40) statement -> . if_stmt
    (41) statement -> . for_loop
    (42) statement -> . while_loop
    (43) statement -> . statement_list
    (73) writeln -> . WRITELN LPAR phrase RPAR
    (74) writeln -> . WRITELN
    (75) write -> . WRITE LPAR phrase RPAR
    (85) readln -> . READLN LPAR identifier RPAR
    (86) readln -> . READLN
    (84) read -> . READ LPAR identifier RPAR
    (44) assign -> . identifier ASSIGN expression
    (68) if_stmt -> . IF expression THEN statement
    (69) if_stmt -> . IF expression THEN statement ELSE statement
    (70) for_loop -> . FOR identifier ASSIGN expression TO expression DO statement
    (71) for_loop -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (72) while_loop -> . WHILE expression DO statement
    (31) statement_list -> . BEGIN statement_seq END
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    WRITELN         shift and go to state 82
    WRITE           shift and go to state 83
    READLN          shift and go to state 84
    READ            shift and go to state 86
    IF              shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    BEGIN           shift and go to state 48
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 85
    statement                      shift and go to state 167
    writeln                        shift and go to state 73
    write                          shift and go to state 74
    readln                         shift and go to state 75
    read                           shift and go to state 76
    assign                         shift and go to state 77
    if_stmt                        shift and go to state 78
    for_loop                       shift and go to state 79
    while_loop                     shift and go to state 80
    statement_list                 shift and go to state 81

state 162

    (71) for_loop -> FOR identifier ASSIGN expression DOWNTO expression DO . statement
    (35) statement -> . writeln
    (36) statement -> . write
    (37) statement -> . readln
    (38) statement -> . read
    (39) statement -> . assign
    (40) statement -> . if_stmt
    (41) statement -> . for_loop
    (42) statement -> . while_loop
    (43) statement -> . statement_list
    (73) writeln -> . WRITELN LPAR phrase RPAR
    (74) writeln -> . WRITELN
    (75) write -> . WRITE LPAR phrase RPAR
    (85) readln -> . READLN LPAR identifier RPAR
    (86) readln -> . READLN
    (84) read -> . READ LPAR identifier RPAR
    (44) assign -> . identifier ASSIGN expression
    (68) if_stmt -> . IF expression THEN statement
    (69) if_stmt -> . IF expression THEN statement ELSE statement
    (70) for_loop -> . FOR identifier ASSIGN expression TO expression DO statement
    (71) for_loop -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (72) while_loop -> . WHILE expression DO statement
    (31) statement_list -> . BEGIN statement_seq END
    (29) identifier -> . IDENTIFIER LBRACKET expression RBRACKET
    (30) identifier -> . IDENTIFIER

    WRITELN         shift and go to state 82
    WRITE           shift and go to state 83
    READLN          shift and go to state 84
    READ            shift and go to state 86
    IF              shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    BEGIN           shift and go to state 48
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 85
    statement                      shift and go to state 168
    writeln                        shift and go to state 73
    write                          shift and go to state 74
    readln                         shift and go to state 75
    read                           shift and go to state 76
    assign                         shift and go to state 77
    if_stmt                        shift and go to state 78
    for_loop                       shift and go to state 79
    while_loop                     shift and go to state 80
    statement_list                 shift and go to state 81

state 163

    (18) type_decl -> ARRAY LBRACKET INTEGER DOT DOT INTEGER . RBRACKET OF type

    RBRACKET        shift and go to state 169


state 164

    (20) type_decl -> ARRAY LBRACKET INTEGER DOT DOT identifier . RBRACKET OF type

    RBRACKET        shift and go to state 170


state 165

    (19) type_decl -> ARRAY LBRACKET identifier DOT DOT identifier . RBRACKET OF type

    RBRACKET        shift and go to state 171


state 166

    (21) type_decl -> ARRAY LBRACKET identifier DOT DOT INTEGER . RBRACKET OF type

    RBRACKET        shift and go to state 172


state 167

    (70) for_loop -> FOR identifier ASSIGN expression TO expression DO statement .

    END             reduce using rule 70 (for_loop -> FOR identifier ASSIGN expression TO expression DO statement .)
    SEMICOLON       reduce using rule 70 (for_loop -> FOR identifier ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 70 (for_loop -> FOR identifier ASSIGN expression TO expression DO statement .)


state 168

    (71) for_loop -> FOR identifier ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 71 (for_loop -> FOR identifier ASSIGN expression DOWNTO expression DO statement .)
    SEMICOLON       reduce using rule 71 (for_loop -> FOR identifier ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 71 (for_loop -> FOR identifier ASSIGN expression DOWNTO expression DO statement .)


state 169

    (18) type_decl -> ARRAY LBRACKET INTEGER DOT DOT INTEGER RBRACKET . OF type

    OF              shift and go to state 173


state 170

    (20) type_decl -> ARRAY LBRACKET INTEGER DOT DOT identifier RBRACKET . OF type

    OF              shift and go to state 174


state 171

    (19) type_decl -> ARRAY LBRACKET identifier DOT DOT identifier RBRACKET . OF type

    OF              shift and go to state 175


state 172

    (21) type_decl -> ARRAY LBRACKET identifier DOT DOT INTEGER RBRACKET . OF type

    OF              shift and go to state 176


state 173

    (18) type_decl -> ARRAY LBRACKET INTEGER DOT DOT INTEGER RBRACKET OF . type
    (23) type -> . IDENTIFIER
    (24) type -> . TREAL
    (25) type -> . TINTEGER
    (26) type -> . TSTRING
    (27) type -> . TCHAR
    (28) type -> . TBOOLEAN

    IDENTIFIER      shift and go to state 111
    TREAL           shift and go to state 112
    TINTEGER        shift and go to state 113
    TSTRING         shift and go to state 114
    TCHAR           shift and go to state 115
    TBOOLEAN        shift and go to state 116

    type                           shift and go to state 177

state 174

    (20) type_decl -> ARRAY LBRACKET INTEGER DOT DOT identifier RBRACKET OF . type
    (23) type -> . IDENTIFIER
    (24) type -> . TREAL
    (25) type -> . TINTEGER
    (26) type -> . TSTRING
    (27) type -> . TCHAR
    (28) type -> . TBOOLEAN

    IDENTIFIER      shift and go to state 111
    TREAL           shift and go to state 112
    TINTEGER        shift and go to state 113
    TSTRING         shift and go to state 114
    TCHAR           shift and go to state 115
    TBOOLEAN        shift and go to state 116

    type                           shift and go to state 178

state 175

    (19) type_decl -> ARRAY LBRACKET identifier DOT DOT identifier RBRACKET OF . type
    (23) type -> . IDENTIFIER
    (24) type -> . TREAL
    (25) type -> . TINTEGER
    (26) type -> . TSTRING
    (27) type -> . TCHAR
    (28) type -> . TBOOLEAN

    IDENTIFIER      shift and go to state 111
    TREAL           shift and go to state 112
    TINTEGER        shift and go to state 113
    TSTRING         shift and go to state 114
    TCHAR           shift and go to state 115
    TBOOLEAN        shift and go to state 116

    type                           shift and go to state 179

state 176

    (21) type_decl -> ARRAY LBRACKET identifier DOT DOT INTEGER RBRACKET OF . type
    (23) type -> . IDENTIFIER
    (24) type -> . TREAL
    (25) type -> . TINTEGER
    (26) type -> . TSTRING
    (27) type -> . TCHAR
    (28) type -> . TBOOLEAN

    IDENTIFIER      shift and go to state 111
    TREAL           shift and go to state 112
    TINTEGER        shift and go to state 113
    TSTRING         shift and go to state 114
    TCHAR           shift and go to state 115
    TBOOLEAN        shift and go to state 116

    type                           shift and go to state 180

state 177

    (18) type_decl -> ARRAY LBRACKET INTEGER DOT DOT INTEGER RBRACKET OF type .

    SEMICOLON       reduce using rule 18 (type_decl -> ARRAY LBRACKET INTEGER DOT DOT INTEGER RBRACKET OF type .)


state 178

    (20) type_decl -> ARRAY LBRACKET INTEGER DOT DOT identifier RBRACKET OF type .

    SEMICOLON       reduce using rule 20 (type_decl -> ARRAY LBRACKET INTEGER DOT DOT identifier RBRACKET OF type .)


state 179

    (19) type_decl -> ARRAY LBRACKET identifier DOT DOT identifier RBRACKET OF type .

    SEMICOLON       reduce using rule 19 (type_decl -> ARRAY LBRACKET identifier DOT DOT identifier RBRACKET OF type .)


state 180

    (21) type_decl -> ARRAY LBRACKET identifier DOT DOT INTEGER RBRACKET OF type .

    SEMICOLON       reduce using rule 21 (type_decl -> ARRAY LBRACKET identifier DOT DOT INTEGER RBRACKET OF type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 145 resolved as shift
