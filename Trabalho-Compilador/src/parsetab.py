
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALDIFFERENTLESSGREATERLEQGEQleftPLUSMINUSleftTIMESDIVISIONDIVMODrightNOTnonassocELSEAND ARRAY ASSIGN BEGIN BOOLEAN CHAR COLON COMMA COMMENT CONST DIFFERENT DIV DIVISION DO DOT DOWNTO ELSE END EQUAL FOR GEQ GREATER IDENTIFIER IF INTEGER LBRACKET LENGTH LEQ LESS LPAR MINUS MOD NOT OF OR PLUS PROGRAM RBRACKET READ READLN REAL RPAR SEMICOLON STRING TBOOLEAN TCHAR THEN TIMES TINTEGER TO TREAL TSTRING VAR WHILE WRITE WRITELNstart : PROGRAM identifier SEMICOLON main DOTmain : const_list var_list statement_listconst_list : CONST const_decls\n| emptyconst_decls : const_decls const_decl\n| const_declconst_decl : identifier EQUAL INTEGER SEMICOLON\n| identifier EQUAL STRING SEMICOLON\n| identifier EQUAL REAL SEMICOLON\n| identifier EQUAL BOOLEAN SEMICOLONvar_list : VAR var_decls\n| emptyvar_decls : var_decls var_decl\n| var_declvar_decl : ident_list COLON type_decl SEMICOLONident_list : identifier COMMA ident_list\n| identifiertype_decl : ARRAY LBRACKET INTEGER DOT DOT INTEGER RBRACKET OF type\n| ARRAY LBRACKET identifier DOT DOT identifier RBRACKET OF type\n| ARRAY LBRACKET INTEGER DOT DOT identifier RBRACKET OF type\n| ARRAY LBRACKET identifier DOT DOT INTEGER RBRACKET OF type\n| typetype : IDENTIFIER\n| TREAL\n| TINTEGER\n| TSTRING\n| TCHAR\n| TBOOLEANidentifier : IDENTIFIER LBRACKET expression RBRACKET\n| IDENTIFIERstatement_list : BEGIN statement_seq ENDstatement_seq : statement_seq SEMICOLON statement\n| statement_seq SEMICOLON\n| statementstatement : writeln\n| write\n| readln\n| read\n| assign\n| if_stmt\n| for_loop\n| while_loop\n| statement_listassign : identifier ASSIGN expressionexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVISION expression\n| expression DIV expression\n| expression MOD expressionexpression : expression EQUAL expression\n| expression DIFFERENT expression\n| expression LESS expression\n| expression GREATER expression\n| expression LEQ expression\n| expression GEQ expressionexpression : expression AND expression\n| expression OR expressionexpression : NOT expressionexpression : LPAR expression RPARexpression : length\n| identifier\n| INTEGER\n| REAL\n| CHAR\n| STRING\n| BOOLEANif_stmt : IF expression THEN statement\n| IF expression THEN statement ELSE statementfor_loop : FOR identifier ASSIGN expression TO expression DO statement\n| FOR identifier ASSIGN expression DOWNTO expression DO statementwhile_loop : WHILE expression DO statementwriteln : WRITELN LPAR phrase RPAR\n| WRITELN write : WRITE LPAR phrase RPARphrase : phrase_listphrase_list : phrase_list COMMA phrase_item\n| phrase_itemphrase_item : STRING\n| CHAR phrase_item : identifierphrase_item : INTEGERphrase_item : REALread : READ LPAR identifier RPARreadln : READLN LPAR identifier RPAR\n| READLNlength : LENGTH LPAR identifier RPARempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,22,],[0,-1,]),'IDENTIFIER':([2,6,9,12,13,24,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,48,49,50,53,87,88,89,90,91,92,99,100,101,102,103,104,118,119,120,121,135,136,137,138,139,141,151,152,153,159,160,161,162,173,174,175,176,],[4,4,4,4,4,4,4,-6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-14,-5,4,4,4,-13,111,4,4,4,4,4,4,4,-7,-8,-9,-10,4,4,4,-15,4,4,4,4,4,4,4,4,4,111,111,111,111,]),'SEMICOLON':([3,4,14,15,16,17,18,19,20,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,93,94,95,96,97,98,99,108,110,111,112,113,114,115,116,122,133,140,142,143,144,145,147,156,167,168,177,178,179,180,],[5,-30,-61,-62,-63,-64,-65,-66,-67,-29,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,99,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-74,-86,118,119,120,121,-87,-31,-33,138,-22,-23,-24,-25,-26,-27,-28,-32,-44,-73,-75,-85,-84,-68,-72,-69,-70,-71,-18,-20,-19,-21,]),'LBRACKET':([4,109,],[6,139,]),'RBRACKET':([4,11,14,15,16,17,18,19,20,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,163,164,165,166,],[-30,29,-61,-62,-63,-64,-65,-66,-67,-29,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,-87,169,170,171,172,]),'PLUS':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,30,-61,-62,-63,-64,-65,-66,-67,-29,-59,30,-45,-46,-47,-48,-49,-50,30,30,30,30,30,30,30,30,-60,-87,30,30,30,30,30,30,]),'MINUS':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,31,-61,-62,-63,-64,-65,-66,-67,-29,-59,31,-45,-46,-47,-48,-49,-50,31,31,31,31,31,31,31,31,-60,-87,31,31,31,31,31,31,]),'TIMES':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,32,-61,-62,-63,-64,-65,-66,-67,-29,-59,32,32,32,-47,-48,-49,-50,32,32,32,32,32,32,32,32,-60,-87,32,32,32,32,32,32,]),'DIVISION':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,33,-61,-62,-63,-64,-65,-66,-67,-29,-59,33,33,33,-47,-48,-49,-50,33,33,33,33,33,33,33,33,-60,-87,33,33,33,33,33,33,]),'DIV':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,34,-61,-62,-63,-64,-65,-66,-67,-29,-59,34,34,34,-47,-48,-49,-50,34,34,34,34,34,34,34,34,-60,-87,34,34,34,34,34,34,]),'MOD':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,35,-61,-62,-63,-64,-65,-66,-67,-29,-59,35,35,35,-47,-48,-49,-50,35,35,35,35,35,35,35,35,-60,-87,35,35,35,35,35,35,]),'EQUAL':([4,11,14,15,16,17,18,19,20,28,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,36,-61,-62,-63,-64,-65,-66,-67,54,-29,-59,36,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,36,36,-60,-87,36,36,36,36,36,36,]),'DIFFERENT':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,37,-61,-62,-63,-64,-65,-66,-67,-29,-59,37,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,37,37,-60,-87,37,37,37,37,37,37,]),'LESS':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,38,-61,-62,-63,-64,-65,-66,-67,-29,-59,38,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,38,38,-60,-87,38,38,38,38,38,38,]),'GREATER':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,39,-61,-62,-63,-64,-65,-66,-67,-29,-59,39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,39,39,-60,-87,39,39,39,39,39,39,]),'LEQ':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,40,-61,-62,-63,-64,-65,-66,-67,-29,-59,40,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,40,40,-60,-87,40,40,40,40,40,40,]),'GEQ':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,41,-61,-62,-63,-64,-65,-66,-67,-29,-59,41,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,41,41,-60,-87,41,41,41,41,41,41,]),'AND':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,42,-61,-62,-63,-64,-65,-66,-67,-29,-59,42,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,42,-60,-87,42,42,42,42,42,42,]),'OR':([4,11,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,107,133,146,157,158,],[-30,43,-61,-62,-63,-64,-65,-66,-67,-29,-59,43,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,-87,43,43,43,43,43,43,]),'RPAR':([4,14,15,16,17,18,19,20,29,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,97,123,124,125,126,127,128,129,130,131,132,134,150,],[-30,-61,-62,-63,-64,-65,-66,-67,-29,-59,69,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,97,-87,140,-76,-78,-79,-80,-81,-82,-83,142,143,144,-77,]),'THEN':([4,14,15,16,17,18,19,20,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,105,],[-30,-61,-62,-63,-64,-65,-66,-67,-29,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,-87,135,]),'DO':([4,14,15,16,17,18,19,20,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,107,157,158,],[-30,-61,-62,-63,-64,-65,-66,-67,-29,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,-87,137,161,162,]),'END':([4,14,15,16,17,18,19,20,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,97,98,99,122,133,140,142,143,144,145,147,156,167,168,],[-30,-61,-62,-63,-64,-65,-66,-67,-29,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,98,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-74,-86,-87,-31,-33,-32,-44,-73,-75,-85,-84,-68,-72,-69,-70,-71,]),'ELSE':([4,14,15,16,17,18,19,20,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,77,78,79,80,81,82,84,97,98,133,140,142,143,144,145,147,156,167,168,],[-30,-61,-62,-63,-64,-65,-66,-67,-29,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,-35,-36,-37,-38,-39,-40,-41,-42,-43,-74,-86,-87,-31,-44,-73,-75,-85,-84,151,-72,-69,-70,-71,]),'TO':([4,14,15,16,17,18,19,20,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,146,],[-30,-61,-62,-63,-64,-65,-66,-67,-29,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,-87,152,]),'DOWNTO':([4,14,15,16,17,18,19,20,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,97,146,],[-30,-61,-62,-63,-64,-65,-66,-67,-29,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-60,-87,153,]),'COMMA':([4,29,52,124,125,126,127,128,129,130,150,],[-30,-29,92,141,-78,-79,-80,-81,-82,-83,-77,]),'COLON':([4,29,51,52,117,],[-30,-29,91,-17,-16,]),'ASSIGN':([4,29,85,106,],[-30,-29,103,136,]),'DOT':([4,7,29,47,98,148,149,154,155,],[-30,22,-29,-2,-31,154,155,159,160,]),'CONST':([5,],[9,]),'VAR':([5,8,10,26,27,53,118,119,120,121,],[-88,24,-4,-3,-6,-5,-7,-8,-9,-10,]),'BEGIN':([5,8,10,23,25,26,27,48,49,50,53,90,99,118,119,120,121,135,137,138,151,161,162,],[-88,-88,-4,48,-12,-3,-6,48,-11,-14,-5,-13,48,-7,-8,-9,-10,48,48,-15,48,48,48,]),'NOT':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,87,89,103,136,152,153,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'LPAR':([6,12,13,21,30,31,32,33,34,35,36,37,38,39,40,41,42,43,82,83,84,86,87,89,103,136,152,153,],[13,13,13,46,13,13,13,13,13,13,13,13,13,13,13,13,13,13,100,101,102,104,13,13,13,13,13,13,]),'INTEGER':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,54,87,89,100,101,103,136,139,141,152,153,159,160,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,93,16,16,129,129,16,16,148,129,16,16,163,166,]),'REAL':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,54,87,89,100,101,103,136,141,152,153,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,95,17,17,130,130,17,17,130,17,17,]),'CHAR':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,87,89,100,101,103,136,141,152,153,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,127,127,18,18,127,18,18,]),'STRING':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,54,87,89,100,101,103,136,141,152,153,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,94,19,19,126,126,19,19,126,19,19,]),'BOOLEAN':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,54,87,89,103,136,152,153,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,96,20,20,20,20,20,20,]),'LENGTH':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,87,89,103,136,152,153,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'WRITELN':([48,99,135,137,151,161,162,],[82,82,82,82,82,82,82,]),'WRITE':([48,99,135,137,151,161,162,],[83,83,83,83,83,83,83,]),'READLN':([48,99,135,137,151,161,162,],[84,84,84,84,84,84,84,]),'READ':([48,99,135,137,151,161,162,],[86,86,86,86,86,86,86,]),'IF':([48,99,135,137,151,161,162,],[87,87,87,87,87,87,87,]),'FOR':([48,99,135,137,151,161,162,],[88,88,88,88,88,88,88,]),'WHILE':([48,99,135,137,151,161,162,],[89,89,89,89,89,89,89,]),'ARRAY':([91,],[109,]),'TREAL':([91,173,174,175,176,],[112,112,112,112,112,]),'TINTEGER':([91,173,174,175,176,],[113,113,113,113,113,]),'TSTRING':([91,173,174,175,176,],[114,114,114,114,114,]),'TCHAR':([91,173,174,175,176,],[115,115,115,115,115,]),'TBOOLEAN':([91,173,174,175,176,],[116,116,116,116,116,]),'OF':([169,170,171,172,],[173,174,175,176,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'identifier':([2,6,9,12,13,24,26,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,48,49,87,88,89,92,99,100,101,102,103,104,135,136,137,139,141,151,152,153,159,160,161,162,],[3,15,28,15,15,52,28,15,15,15,15,15,15,15,15,15,15,15,15,15,15,70,85,52,15,106,15,52,85,128,128,132,15,134,85,15,85,149,128,85,15,15,164,165,85,85,]),'main':([5,],[7,]),'const_list':([5,],[8,]),'empty':([5,8,],[10,25,]),'expression':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,87,89,103,136,152,153,],[11,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,105,107,133,146,157,158,]),'length':([6,12,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,87,89,103,136,152,153,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'var_list':([8,],[23,]),'const_decls':([9,],[26,]),'const_decl':([9,26,],[27,53,]),'statement_list':([23,48,99,135,137,151,161,162,],[47,81,81,81,81,81,81,81,]),'var_decls':([24,],[49,]),'var_decl':([24,49,],[50,90,]),'ident_list':([24,49,92,],[51,51,117,]),'statement_seq':([48,],[71,]),'statement':([48,99,135,137,151,161,162,],[72,122,145,147,156,167,168,]),'writeln':([48,99,135,137,151,161,162,],[73,73,73,73,73,73,73,]),'write':([48,99,135,137,151,161,162,],[74,74,74,74,74,74,74,]),'readln':([48,99,135,137,151,161,162,],[75,75,75,75,75,75,75,]),'read':([48,99,135,137,151,161,162,],[76,76,76,76,76,76,76,]),'assign':([48,99,135,137,151,161,162,],[77,77,77,77,77,77,77,]),'if_stmt':([48,99,135,137,151,161,162,],[78,78,78,78,78,78,78,]),'for_loop':([48,99,135,137,151,161,162,],[79,79,79,79,79,79,79,]),'while_loop':([48,99,135,137,151,161,162,],[80,80,80,80,80,80,80,]),'type_decl':([91,],[108,]),'type':([91,173,174,175,176,],[110,177,178,179,180,]),'phrase':([100,101,],[123,131,]),'phrase_list':([100,101,],[124,124,]),'phrase_item':([100,101,141,],[125,125,150,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PROGRAM identifier SEMICOLON main DOT','start',5,'p_start','PascalYacc.py',21),
  ('main -> const_list var_list statement_list','main',3,'p_main','PascalYacc.py',25),
  ('const_list -> CONST const_decls','const_list',2,'p_const_list','PascalYacc.py',29),
  ('const_list -> empty','const_list',1,'p_const_list','PascalYacc.py',30),
  ('const_decls -> const_decls const_decl','const_decls',2,'p_const_decls','PascalYacc.py',37),
  ('const_decls -> const_decl','const_decls',1,'p_const_decls','PascalYacc.py',38),
  ('const_decl -> identifier EQUAL INTEGER SEMICOLON','const_decl',4,'p_const_decl','PascalYacc.py',45),
  ('const_decl -> identifier EQUAL STRING SEMICOLON','const_decl',4,'p_const_decl','PascalYacc.py',46),
  ('const_decl -> identifier EQUAL REAL SEMICOLON','const_decl',4,'p_const_decl','PascalYacc.py',47),
  ('const_decl -> identifier EQUAL BOOLEAN SEMICOLON','const_decl',4,'p_const_decl','PascalYacc.py',48),
  ('var_list -> VAR var_decls','var_list',2,'p_var_list','PascalYacc.py',55),
  ('var_list -> empty','var_list',1,'p_var_list','PascalYacc.py',56),
  ('var_decls -> var_decls var_decl','var_decls',2,'p_var_decls','PascalYacc.py',63),
  ('var_decls -> var_decl','var_decls',1,'p_var_decls','PascalYacc.py',64),
  ('var_decl -> ident_list COLON type_decl SEMICOLON','var_decl',4,'p_var_decl','PascalYacc.py',71),
  ('ident_list -> identifier COMMA ident_list','ident_list',3,'p_ident_list','PascalYacc.py',75),
  ('ident_list -> identifier','ident_list',1,'p_ident_list','PascalYacc.py',76),
  ('type_decl -> ARRAY LBRACKET INTEGER DOT DOT INTEGER RBRACKET OF type','type_decl',9,'p_type_decl','PascalYacc.py',83),
  ('type_decl -> ARRAY LBRACKET identifier DOT DOT identifier RBRACKET OF type','type_decl',9,'p_type_decl','PascalYacc.py',84),
  ('type_decl -> ARRAY LBRACKET INTEGER DOT DOT identifier RBRACKET OF type','type_decl',9,'p_type_decl','PascalYacc.py',85),
  ('type_decl -> ARRAY LBRACKET identifier DOT DOT INTEGER RBRACKET OF type','type_decl',9,'p_type_decl','PascalYacc.py',86),
  ('type_decl -> type','type_decl',1,'p_type_decl','PascalYacc.py',87),
  ('type -> IDENTIFIER','type',1,'p_type','PascalYacc.py',94),
  ('type -> TREAL','type',1,'p_type','PascalYacc.py',95),
  ('type -> TINTEGER','type',1,'p_type','PascalYacc.py',96),
  ('type -> TSTRING','type',1,'p_type','PascalYacc.py',97),
  ('type -> TCHAR','type',1,'p_type','PascalYacc.py',98),
  ('type -> TBOOLEAN','type',1,'p_type','PascalYacc.py',99),
  ('identifier -> IDENTIFIER LBRACKET expression RBRACKET','identifier',4,'p_identifier','PascalYacc.py',103),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','PascalYacc.py',104),
  ('statement_list -> BEGIN statement_seq END','statement_list',3,'p_statement_list','PascalYacc.py',111),
  ('statement_seq -> statement_seq SEMICOLON statement','statement_seq',3,'p_statement_seq','PascalYacc.py',115),
  ('statement_seq -> statement_seq SEMICOLON','statement_seq',2,'p_statement_seq','PascalYacc.py',116),
  ('statement_seq -> statement','statement_seq',1,'p_statement_seq','PascalYacc.py',117),
  ('statement -> writeln','statement',1,'p_statement','PascalYacc.py',126),
  ('statement -> write','statement',1,'p_statement','PascalYacc.py',127),
  ('statement -> readln','statement',1,'p_statement','PascalYacc.py',128),
  ('statement -> read','statement',1,'p_statement','PascalYacc.py',129),
  ('statement -> assign','statement',1,'p_statement','PascalYacc.py',130),
  ('statement -> if_stmt','statement',1,'p_statement','PascalYacc.py',131),
  ('statement -> for_loop','statement',1,'p_statement','PascalYacc.py',132),
  ('statement -> while_loop','statement',1,'p_statement','PascalYacc.py',133),
  ('statement -> statement_list','statement',1,'p_statement','PascalYacc.py',134),
  ('assign -> identifier ASSIGN expression','assign',3,'p_assign','PascalYacc.py',138),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','PascalYacc.py',142),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','PascalYacc.py',143),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','PascalYacc.py',144),
  ('expression -> expression DIVISION expression','expression',3,'p_expression_binop','PascalYacc.py',145),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','PascalYacc.py',146),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','PascalYacc.py',147),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_comparison','PascalYacc.py',159),
  ('expression -> expression DIFFERENT expression','expression',3,'p_expression_comparison','PascalYacc.py',160),
  ('expression -> expression LESS expression','expression',3,'p_expression_comparison','PascalYacc.py',161),
  ('expression -> expression GREATER expression','expression',3,'p_expression_comparison','PascalYacc.py',162),
  ('expression -> expression LEQ expression','expression',3,'p_expression_comparison','PascalYacc.py',163),
  ('expression -> expression GEQ expression','expression',3,'p_expression_comparison','PascalYacc.py',164),
  ('expression -> expression AND expression','expression',3,'p_expression_logic','PascalYacc.py',168),
  ('expression -> expression OR expression','expression',3,'p_expression_logic','PascalYacc.py',169),
  ('expression -> NOT expression','expression',2,'p_expression_not','PascalYacc.py',173),
  ('expression -> LPAR expression RPAR','expression',3,'p_expression_paren','PascalYacc.py',177),
  ('expression -> length','expression',1,'p_expression_atomic','PascalYacc.py',181),
  ('expression -> identifier','expression',1,'p_expression_atomic','PascalYacc.py',182),
  ('expression -> INTEGER','expression',1,'p_expression_atomic','PascalYacc.py',183),
  ('expression -> REAL','expression',1,'p_expression_atomic','PascalYacc.py',184),
  ('expression -> CHAR','expression',1,'p_expression_atomic','PascalYacc.py',185),
  ('expression -> STRING','expression',1,'p_expression_atomic','PascalYacc.py',186),
  ('expression -> BOOLEAN','expression',1,'p_expression_atomic','PascalYacc.py',187),
  ('if_stmt -> IF expression THEN statement','if_stmt',4,'p_if_stmt','PascalYacc.py',191),
  ('if_stmt -> IF expression THEN statement ELSE statement','if_stmt',6,'p_if_stmt','PascalYacc.py',192),
  ('for_loop -> FOR identifier ASSIGN expression TO expression DO statement','for_loop',8,'p_for_loop','PascalYacc.py',199),
  ('for_loop -> FOR identifier ASSIGN expression DOWNTO expression DO statement','for_loop',8,'p_for_loop','PascalYacc.py',200),
  ('while_loop -> WHILE expression DO statement','while_loop',4,'p_while_loop','PascalYacc.py',205),
  ('writeln -> WRITELN LPAR phrase RPAR','writeln',4,'p_writeln','PascalYacc.py',209),
  ('writeln -> WRITELN','writeln',1,'p_writeln','PascalYacc.py',210),
  ('write -> WRITE LPAR phrase RPAR','write',4,'p_write','PascalYacc.py',217),
  ('phrase -> phrase_list','phrase',1,'p_phrase','PascalYacc.py',221),
  ('phrase_list -> phrase_list COMMA phrase_item','phrase_list',3,'p_phrase_list','PascalYacc.py',225),
  ('phrase_list -> phrase_item','phrase_list',1,'p_phrase_list','PascalYacc.py',226),
  ('phrase_item -> STRING','phrase_item',1,'p_phrase_item_string','PascalYacc.py',233),
  ('phrase_item -> CHAR','phrase_item',1,'p_phrase_item_string','PascalYacc.py',234),
  ('phrase_item -> identifier','phrase_item',1,'p_phrase_item_var','PascalYacc.py',238),
  ('phrase_item -> INTEGER','phrase_item',1,'p_phrase_item_int','PascalYacc.py',242),
  ('phrase_item -> REAL','phrase_item',1,'p_phrase_item_real','PascalYacc.py',246),
  ('read -> READ LPAR identifier RPAR','read',4,'p_read','PascalYacc.py',250),
  ('readln -> READLN LPAR identifier RPAR','readln',4,'p_readln','PascalYacc.py',254),
  ('readln -> READLN','readln',1,'p_readln','PascalYacc.py',255),
  ('length -> LENGTH LPAR identifier RPAR','length',4,'p_length','PascalYacc.py',262),
  ('empty -> <empty>','empty',0,'p_empty','PascalYacc.py',266),
]
